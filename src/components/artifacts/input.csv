Name,Code
Interactive Two-Step Addition Problem Solver,"import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Trophy } from 'lucide-react';

const problems = [
  {
    text: ""Tom has 23 stickers. He gets 12 more, then finds 8 more. How many now?"",
    numbers: [23, 12, 8],
    finalAmount: 43
  },
  {
    text: ""Sara has 35 marbles. She wins 17, then finds 9 more. How many now?"",
    numbers: [35, 17, 9],
    finalAmount: 61
  },
  {
    text: ""Max has 42 coins. He earns 15 more, then gets 7 as a gift. How many now?"",
    numbers: [42, 15, 7],
    finalAmount: 64
  },
  {
    text: ""Lily has 18 flowers. She picks 13 more, then buys 6. How many now?"",
    numbers: [18, 13, 6],
    finalAmount: 37
  },
  {
    text: ""Alex has 50 cards. He trades for 25 more, then finds 10. How many now?"",
    numbers: [50, 25, 10],
    finalAmount: 85
  },
  {
    text: ""Emma has 30 crayons. She gets 14 new ones, then borrows 8. How many now?"",
    numbers: [30, 14, 8],
    finalAmount: 52
  },
  {
    text: ""Jack has 45 stamps. He buys 20 more, then receives 5 as a gift. How many now?"",
    numbers: [45, 20, 5],
    finalAmount: 70
  },
  {
    text: ""Zoe has 28 stickers. She earns 16 more, then finds 9 in her desk. How many now?"",
    numbers: [28, 16, 9],
    finalAmount: 53
  },
  {
    text: ""Ryan has 39 toy cars. He gets 11 for his birthday, then buys 7. How many now?"",
    numbers: [39, 11, 7],
    finalAmount: 57
  },
  {
    text: ""Mia has 22 pencils. She finds 18 more, then gets 5 from a friend. How many now?"",
    numbers: [22, 18, 5],
    finalAmount: 45
  }
];

const TwoStepAdditionSolver = () => {
  const [problemIndex, setProblemIndex] = useState(0);
  const [userInputs, setUserInputs] = useState({
    step1First: '',
    step1Second: '',
    step1Result: '',
    step2First: '',
    step2Second: '',
    step2Result: ''
  });
  const [step, setStep] = useState(0);
  const [feedback, setFeedback] = useState('');
  const [score, setScore] = useState(0);

  const problem = problems[problemIndex];

  const handleInputChange = (e, key) => {
    setUserInputs({ ...userInputs, [key]: e.target.value });
  };

  const checkStep1 = () => {
    const first = parseInt(userInputs.step1First);
    const second = parseInt(userInputs.step1Second);
    const result = parseInt(userInputs.step1Result);
    
    if (isNaN(first) || isNaN(second) || isNaN(result)) {
      setFeedback(""Oops! Make sure to fill in all the boxes."");
      return;
    }

    if (first + second === result && problem.numbers.includes(first) && problem.numbers.includes(second)) {
      setFeedback(""Great job! You got it right!"");
      setStep(1);
      setScore(prevScore => prevScore + 0.5);
    } else if (first + second === result) {
      setFeedback(""Close! But check the numbers in the problem."");
    } else {
      setFeedback(""Not quite. Try adding the numbers again."");
    }
  };

  const checkStep2 = () => {
    const first = parseInt(userInputs.step2First);
    const second = parseInt(userInputs.step2Second);
    const result = parseInt(userInputs.step2Result);

    if (isNaN(first) || isNaN(second) || isNaN(result)) {
      setFeedback(""Oops! Make sure to fill in all the boxes."");
      return;
    }

    if (first + second === result && result === problem.finalAmount) {
      setFeedback(""Wow! You solved the whole problem!"");
      setStep(2);
      setScore(prevScore => prevScore + 0.5);
    } else if (first + second === result) {
      setFeedback(""So close! Check if you used all the numbers."");
    } else {
      setFeedback(""Not quite. Try adding the numbers again."");
    }
  };

  const nextProblem = () => {
    setProblemIndex((prevIndex) => (prevIndex + 1) % problems.length);
    setStep(0);
    setUserInputs({
      step1First: '',
      step1Second: '',
      step1Result: '',
      step2First: '',
      step2Second: '',
      step2Result: ''
    });
    setFeedback('');
  };

  return (
    <Card className=""w-full max-w-2xl mx-auto bg-gradient-to-r from-purple-100 to-indigo-100"">
      <CardHeader className=""bg-gradient-to-r from-purple-400 to-indigo-400 text-white rounded-t-lg"">
        <CardTitle className=""text-2xl font-bold text-center"">Math Adventure!</CardTitle>
        <div className=""flex justify-center items-center space-x-2"">
          <Trophy className=""w-6 h-6 text-yellow-400"" />
          <span className=""text-xl font-bold"">{score.toFixed(1)}</span>
        </div>
      </CardHeader>
      <CardContent className=""p-6"">
        <p className=""mb-4 text-lg font-semibold text-center bg-white rounded-lg p-4 shadow-md"">{problem.text}</p>

        <div className=""space-y-6"">
          <div className=""bg-lavender-100 p-4 rounded-lg shadow-md"">
            <h3 className=""font-bold mb-2 text-center"">Step 1: Add any two numbers</h3>
            <div className=""flex items-center justify-center space-x-2 mt-2"">
              <Input
                type=""number""
                value={userInputs.step1First}
                onChange={(e) => handleInputChange(e, 'step1First')}
                className=""w-16 text-center bg-white""
                placeholder=""?""
              />
              <span className=""text-2xl font-bold"">+</span>
              <Input
                type=""number""
                value={userInputs.step1Second}
                onChange={(e) => handleInputChange(e, 'step1Second')}
                className=""w-16 text-center bg-white""
                placeholder=""?""
              />
              <span className=""text-2xl font-bold"">=</span>
              <Input
                type=""number""
                value={userInputs.step1Result}
                onChange={(e) => handleInputChange(e, 'step1Result')}
                className=""w-16 text-center bg-white""
                placeholder=""?""
              />
            </div>
            <div className=""mt-4 flex justify-center"">
              <Button onClick={checkStep1} disabled={step > 0} className=""bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded"">
                Check Step 1
              </Button>
            </div>
          </div>

          {step >= 1 && (
            <div className=""bg-indigo-100 p-4 rounded-lg shadow-md"">
              <h3 className=""font-bold mb-2 text-center"">Step 2: Add the last number</h3>
              <div className=""flex items-center justify-center space-x-2 mt-2"">
                <Input
                  type=""number""
                  value={userInputs.step2First}
                  onChange={(e) => handleInputChange(e, 'step2First')}
                  className=""w-16 text-center bg-white""
                  placeholder=""?""
                />
                <span className=""text-2xl font-bold"">+</span>
                <Input
                  type=""number""
                  value={userInputs.step2Second}
                  onChange={(e) => handleInputChange(e, 'step2Second')}
                  className=""w-16 text-center bg-white""
                  placeholder=""?""
                />
                <span className=""text-2xl font-bold"">=</span>
                <Input
                  type=""number""
                  value={userInputs.step2Result}
                  onChange={(e) => handleInputChange(e, 'step2Result')}
                  className=""w-16 text-center bg-white""
                  placeholder=""?""
                />
              </div>
              <div className=""mt-4 flex justify-center"">
                <Button onClick={checkStep2} disabled={step > 1} className=""bg-indigo-500 hover:bg-indigo-600 text-white font-bold py-2 px-4 rounded"">
                  Check Final Answer
                </Button>
              </div>
            </div>
          )}
        </div>

        {feedback && (
          <div className={`mt-4 p-2 rounded flex items-center justify-center ${feedback.includes('Great') || feedback.includes('Wow') ? 'bg-purple-200' : 'bg-indigo-200'}`}>
            <p className=""text-lg font-bold"">{feedback}</p>
          </div>
        )}
      </CardContent>
      <CardFooter className=""p-4"">
        <Button 
          onClick={nextProblem} 
          className=""w-full bg-violet-500 hover:bg-violet-600 text-white font-bold py-2 px-4 rounded"" 
          disabled={step < 2}
        >
          Next Problem
        </Button>
      </CardFooter>
    </Card>
  );
};

export default TwoStepAdditionSolver;"
Wizard of Oz: Interactive Two-Step Addition Problem Solver,"import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Heart } from 'lucide-react';

const problems = [
  {
    text: ""Dorothy finds 23 yellow bricks. The Scarecrow gives her 12 more, then she discovers 8 in a field. How many yellow bricks does she have now?"",
    numbers: [23, 12, 8],
    finalAmount: 43,
    emoji: ""üß±""
  },
  {
    text: ""The Tin Man collects 35 oil cans. He receives 17 from the Wizard, then finds 9 more in Emerald City. How many oil cans does he have now?"",
    numbers: [35, 17, 9],
    finalAmount: 61,
    emoji: ""üõ¢Ô∏è""
  },
  {
    text: ""The Cowardly Lion counts 42 courage medals. He earns 15 more from facing fears, then gets 7 as a gift from Oz. How many medals does he have now?"",
    numbers: [42, 15, 7],
    finalAmount: 64,
    emoji: ""üèÖ""
  },
  {
    text: ""Glinda has 18 magic wands. She creates 13 more, then receives 6 from other good witches. How many wands does she have now?"",
    numbers: [18, 13, 6],
    finalAmount: 37,
    emoji: ""ü™Ñ""
  },
  {
    text: ""The Wizard collects 50 green emeralds. He trades for 25 more, then discovers 10 in his vault. How many emeralds does he have now?"",
    numbers: [50, 25, 10],
    finalAmount: 85,
    emoji: ""üíé""
  },
  {
    text: ""Toto finds 30 bones in Munchkinland. He gets 14 new ones from the Munchkins, then digs up 8 more. How many bones does Toto have now?"",
    numbers: [30, 14, 8],
    finalAmount: 52,
    emoji: ""ü¶¥""
  },
  {
    text: ""The Wicked Witch has 45 flying monkeys. She recruits 20 more, then 5 return from a mission. How many flying monkeys does she have now?"",
    numbers: [45, 20, 5],
    finalAmount: 70,
    emoji: ""üêí""
  },
  {
    text: ""Oz has 28 hot air balloons. It creates 16 more for tourists, then finds 9 old ones in storage. How many hot air balloons does Oz have now?"",
    numbers: [28, 16, 9],
    finalAmount: 53,
    emoji: ""üéà""
  },
  {
    text: ""The Scarecrow counts 39 bits of straw in his hat. He adds 11 more for extra padding, then stuffs in 7 more. How many bits of straw are in his hat now?"",
    numbers: [39, 11, 7],
    finalAmount: 57,
    emoji: ""üåæ""
  },
  {
    text: ""Dorothy has 22 ruby slippers. She finds 18 more in the Emerald City, then gets 5 from the Good Witch. How many ruby slippers does she have now?"",
    numbers: [22, 18, 5],
    finalAmount: 45,
    emoji: ""üë†""
  }
];

const WizardOfOzMathAdventure = () => {
  const [problemIndex, setProblemIndex] = useState(0);
  const [userInputs, setUserInputs] = useState({
    step1First: '',
    step1Second: '',
    step1Result: '',
    step2First: '',
    step2Second: '',
    step2Result: ''
  });
  const [step, setStep] = useState(0);
  const [feedback, setFeedback] = useState('');
  const [score, setScore] = useState(0);

  const problem = problems[problemIndex];

  const handleInputChange = (e, key) => {
    setUserInputs({ ...userInputs, [key]: e.target.value });
  };

  const checkStep1 = () => {
    const first = parseInt(userInputs.step1First);
    const second = parseInt(userInputs.step1Second);
    const result = parseInt(userInputs.step1Result);
    
    if (isNaN(first) || isNaN(second) || isNaN(result)) {
      setFeedback(""Oh my! Make sure to fill in all the boxes, or the Wicked Witch might get you!"");
      return;
    }

    if (first + second === result && problem.numbers.includes(first) && problem.numbers.includes(second)) {
      setFeedback(""Great job! You're following the yellow brick road to success!"");
      setStep(1);
      setScore(prevScore => prevScore + 0.5);
    } else if (first + second === result) {
      setFeedback(""Close! But check the numbers in Oz's problem again."");
    } else {
      setFeedback(""Not quite there, my pretty. Try adding those numbers once more!"");
    }
  };

  const checkStep2 = () => {
    const first = parseInt(userInputs.step2First);
    const second = parseInt(userInputs.step2Second);
    const result = parseInt(userInputs.step2Result);

    if (isNaN(first) || isNaN(second) || isNaN(result)) {
      setFeedback(""Lions and tigers and bears, oh my! Don't forget to fill in all the boxes!"");
      return;
    }

    if (first + second === result && result === problem.finalAmount) {
      setFeedback(""Wonderful! You've solved the riddle of Oz!"");
      setStep(2);
      setScore(prevScore => prevScore + 0.5);
    } else if (first + second === result) {
      setFeedback(""So close! Check if you used all the magic numbers of Oz."");
    } else {
      setFeedback(""Not quite there yet. Keep following the yellow brick road of addition!"");
    }
  };

  const nextProblem = () => {
    setProblemIndex((prevIndex) => (prevIndex + 1) % problems.length);
    setStep(0);
    setUserInputs({
      step1First: '',
      step1Second: '',
      step1Result: '',
      step2First: '',
      step2Second: '',
      step2Result: ''
    });
    setFeedback('');
  };

  return (
    <Card className=""w-full max-w-2xl mx-auto bg-gradient-to-r from-yellow-100 to-green-100"">
      <CardHeader className=""bg-gradient-to-r from-yellow-400 to-green-400 text-white rounded-t-lg"">
        <CardTitle className=""text-2xl font-bold text-center"">Wizard of Oz Math Adventure! üßô‚Äç‚ôÇÔ∏è</CardTitle>
        <div className=""flex justify-center items-center space-x-2"">
          <Heart className=""w-6 h-6 text-red-500"" />
          <span className=""text-xl font-bold"">{score.toFixed(1)}</span>
        </div>
      </CardHeader>
      <CardContent className=""p-6"">
        <p className=""mb-4 text-lg font-semibold text-center bg-white rounded-lg p-4 shadow-md border-2 border-yellow-400"">
          {problem.emoji} {problem.text}
        </p>

        <div className=""space-y-6"">
          <div className=""bg-yellow-100 p-4 rounded-lg shadow-md border-2 border-yellow-400"">
            <h3 className=""font-bold mb-2 text-center"">Step 1: Follow the Yellow Brick Road</h3>
            <div className=""flex items-center justify-center space-x-2 mt-2"">
              <Input
                type=""number""
                value={userInputs.step1First}
                onChange={(e) => handleInputChange(e, 'step1First')}
                className=""w-16 text-center bg-white border-2 border-yellow-400""
                placeholder=""?""
              />
              <span className=""text-2xl font-bold"">+</span>
              <Input
                type=""number""
                value={userInputs.step1Second}
                onChange={(e) => handleInputChange(e, 'step1Second')}
                className=""w-16 text-center bg-white border-2 border-yellow-400""
                placeholder=""?""
              />
              <span className=""text-2xl font-bold"">=</span>
              <Input
                type=""number""
                value={userInputs.step1Result}
                onChange={(e) => handleInputChange(e, 'step1Result')}
                className=""w-16 text-center bg-white border-2 border-yellow-400""
                placeholder=""?""
              />
            </div>
            <div className=""mt-4 flex justify-center"">
              <Button onClick={checkStep1} disabled={step > 0} className=""bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded"">
                Check Step 1 üîç
              </Button>
            </div>
          </div>

          {step >= 1 && (
            <div className=""bg-green-100 p-4 rounded-lg shadow-md border-2 border-green-400"">
              <h3 className=""font-bold mb-2 text-center"">Step 2: Reach the Emerald City</h3>
              <div className=""flex items-center justify-center space-x-2 mt-2"">
                <Input
                  type=""number""
                  value={userInputs.step2First}
                  onChange={(e) => handleInputChange(e, 'step2First')}
                  className=""w-16 text-center bg-white border-2 border-green-400""
                  placeholder=""?""
                />
                <span className=""text-2xl font-bold"">+</span>
                <Input
                  type=""number""
                  value={userInputs.step2Second}
                  onChange={(e) => handleInputChange(e, 'step2Second')}
                  className=""w-16 text-center bg-white border-2 border-green-400""
                  placeholder=""?""
                />
                <span className=""text-2xl font-bold"">=</span>
                <Input
                  type=""number""
                  value={userInputs.step2Result}
                  onChange={(e) => handleInputChange(e, 'step2Result')}
                  className=""w-16 text-center bg-white border-2 border-green-400""
                  placeholder=""?""
                />
              </div>
              <div className=""mt-4 flex justify-center"">
                <Button onClick={checkStep2} disabled={step > 1} className=""bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded"">
                  Check Final Answer üîÆ
                </Button>
              </div>
            </div>
          )}
        </div>

        {feedback && (
          <div className={`mt-4 p-2 rounded flex items-center justify-center ${feedback.includes('Great') || feedback.includes('Wonderful') ? 'bg-yellow-200 border-2 border-yellow-400' : 'bg-green-200 border-2 border-green-400'}`}>
            <p className=""text-lg font-bold"">{feedback}</p>
          </div>
        )}
      </CardContent>
      <CardFooter className=""p-4"">
        <Button 
          onClick={nextProblem} 
          className=""w-full bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded"" 
          disabled={step < 2}
        >
          Next Oz Adventure üåà
        </Button>
      </CardFooter>
    </Card>
  );
};

export default WizardOfOzMathAdventure;"
"Fractions using lego tower, share with friends","import React, { useState } from 'react';

// Updated color scheme - keeping friend colors vibrant and fun while Asher's pieces are blue
const friendColors = ['#FF6B6B', '#4ECDC4', '#FFD93D', '#95E1D3', '#A8E6CF', '#FF8B94', '#BFACE2', '#98DDCA'];
const asherBlue = '#4F97F7';

const LegoBrick = ({ color, isShared }) => (
  <svg width=""100"" height=""40"" viewBox=""0 0 100 40"" className=""transition-all duration-300"">
    <rect width=""100"" height=""40"" rx=""5"" fill={color} />
    <circle cx=""25"" cy=""20"" r=""8"" fill=""rgba(0,0,0,0.1)"" />
    <circle cx=""50"" cy=""20"" r=""8"" fill=""rgba(0,0,0,0.1)"" />
    <circle cx=""75"" cy=""20"" r=""8"" fill=""rgba(0,0,0,0.1)"" />
  </svg>
);

const LegoTower = () => {
  const [sharedPieces, setSharedPieces] = useState(0);
  const totalPieces = 8;

  const generateStory = (shared) => {
    const stories = [
      ""Asher built a beautiful blue LEGO tower with 8 special pieces to share with his best friends!"",
      ""River-lee received the coral piece - perfect for their amazing dragon creation! 1/8 of Asher's tower is now shared."",
      ""Mavrick got the turquoise piece - exactly what he needed for his underwater scene! 2/8 (or 1/4) of the tower is shared."",
      ""Maizey's eyes lit up at the sunny yellow piece for her fairy garden! 3/8 of Asher's tower has found new homes."",
      ""Emmy carefully picked the mint piece for her treehouse project. Half of Asher's tower is now bringing smiles!"",
      ""Quin chose the sage green piece for their nature-inspired build. 5/8 of the tower is spreading joy."",
      ""Ethan selected the rose piece - just right for his rocket ship! Now 6/8 (or 3/4) of the tower is shared."",
      ""Willow loved the lavender piece for her magical castle. Just one piece remains!"",
      ""Atticus received the final seafoam piece - now everyone has a special part of Asher's tower!""
    ];
    return stories[shared];
  };

  const handleShare = () => {
    if (sharedPieces < totalPieces) {
      setSharedPieces(sharedPieces + 1);
    }
  };

  const handleReset = () => {
    setSharedPieces(0);
  };

  return (
    <div className=""flex flex-col items-center space-y-4 p-6 bg-gradient-to-b from-blue-50 to-blue-100 rounded-lg shadow-lg"">
      <h2 className=""text-2xl font-bold text-blue-600"">Asher's Blue Tower of Friendship</h2>
      <div className=""flex flex-col-reverse items-center space-y-2 space-y-reverse"" style={{ height: '320px' }}>
        {[...Array(totalPieces)].map((_, i) => (
          <div 
            key={i} 
            className=""transform hover:scale-105 transition-transform duration-200""
            style={{ margin: '4px 0' }}
          >
            <LegoBrick
              color={i < sharedPieces ? friendColors[i] : asherBlue}
              isShared={i < sharedPieces}
            />
          </div>
        ))}
      </div>
      <div className=""bg-white p-4 rounded-lg shadow-inner max-w-md border-2 border-blue-100"">
        <p className=""text-lg text-center text-gray-700 font-medium"">
          {generateStory(sharedPieces)}
        </p>
      </div>
      <div className=""flex space-x-4"">
        <button
          onClick={handleShare}
          disabled={sharedPieces === totalPieces}
          className=""px-6 py-3 bg-blue-500 text-white rounded-full hover:bg-blue-600 disabled:bg-gray-400 transform hover:scale-105 transition-all duration-200 shadow-md""
        >
          Share Next Piece
        </button>
        <button
          onClick={handleReset}
          className=""px-6 py-3 bg-gray-500 text-white rounded-full hover:bg-gray-600 transform hover:scale-105 transition-all duration-200 shadow-md""
        >
          Start Over
        </button>
      </div>
      <div className=""bg-white px-6 py-3 rounded-full shadow-inner border-2 border-blue-100"">
        <p className=""text-md font-semibold text-blue-600"">
          Shared Pieces: {sharedPieces}/{totalPieces} ({Math.round((sharedPieces/totalPieces) * 100)}% of Asher's tower)
        </p>
      </div>
    </div>
  );
};

export default LegoTower;"
Pizza party adventure,"import React, { useState } from 'react';

const friends = [
  { name: 'River-lee', color: '#FF6B6B', topping: 'Pepperoni', story: 'loves spicy food' },
  { name: 'Mavrick', color: '#4ECDC4', topping: 'Veggie Supreme', story: 'always picks the healthiest option' },
  { name: 'Maizey', color: '#FFD93D', topping: 'Four Cheese', story: 'is a cheese enthusiast' },
  { name: 'Emmy', color: '#95E1D3', topping: 'Margherita', story: 'keeps it classic' },
  { name: 'Quin', color: '#A8E6CF', topping: 'Pesto', story: 'tries adventurous flavors' },
  { name: 'Ethan', color: '#FF8B94', topping: 'Hawaiian', story: 'believes pineapple belongs on pizza' },
  { name: 'Willow', color: '#DCD6F7', topping: 'BBQ Chicken', story: 'enjoys sweet and tangy tastes' },
  { name: 'Atticus', color: '#F4A460', topping: 'Buffalo', story: 'picks anything with a kick' }
];

const PizzaWheel = ({ sharedSlices }) => {
  const radius = 150;
  const centerX = 200;
  const centerY = 200;
  const sliceCount = 8;
  const anglePerSlice = (2 * Math.PI) / sliceCount;

  const getSlicePath = (index) => {
    const startAngle = index * anglePerSlice - Math.PI / 2;
    const endAngle = startAngle + anglePerSlice;
    
    const startX = centerX + radius * Math.cos(startAngle);
    const startY = centerY + radius * Math.sin(startAngle);
    const endX = centerX + radius * Math.cos(endAngle);
    const endY = centerY + radius * Math.sin(endAngle);
    
    const largeArcFlag = 0;
    
    return `M ${centerX} ${centerY}
            L ${startX} ${startY}
            A ${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY}
            Z`;
  };

  const createToppingDots = (sliceIndex) => {
    const dots = [];
    const dotCount = 5;
    const dotRadius = 3;
    
    for (let i = 0; i < dotCount; i++) {
      const angle = (sliceIndex * anglePerSlice) + (anglePerSlice / 2) - Math.PI / 2;
      const distance = (radius * (i + 1)) / (dotCount + 1);
      const x = centerX + distance * Math.cos(angle);
      const y = centerY + distance * Math.sin(angle);
      
      dots.push(
        <circle
          key={`dot-${sliceIndex}-${i}`}
          cx={x}
          cy={y}
          r={dotRadius}
          fill=""#8B4513""
          opacity=""0.6""
        />
      );
    }
    return dots;
  };

  return (
    <svg width=""400"" height=""400"" viewBox=""0 0 400 400"" className=""transition-all duration-300"">
      {/* Pizza crust circle */}
      <circle
        cx={centerX}
        cy={centerY}
        r={radius + 5}
        fill=""#D2691E""
      />
      {/* Base pizza circle */}
      <circle
        cx={centerX}
        cy={centerY}
        r={radius}
        fill=""#FFF2CC""
      />
      {/* Slices */}
      {[...Array(sliceCount)].map((_, index) => (
        <g key={`slice-${index}`}>
          <path
            d={getSlicePath(index)}
            fill={index < sharedSlices ? friends[index].color : '#FFF2CC'}
            stroke=""#8B4513""
            strokeWidth=""2""
            className=""transition-all duration-300""
          />
          {createToppingDots(index)}
        </g>
      ))}
    </svg>
  );
};

const PizzaSharing = () => {
  const [sharedSlices, setSharedSlices] = useState(0);
  const totalSlices = 8;

  const generateStory = (shared) => {
    const stories = [
      ""Asher's hosting a pizza party! Everyone's excited to share a delicious 8-slice pizza."",
      `${friends[0].name} goes first - they ${friends[0].story}! That's 1/8 of the pizza shared.`,
      `${friends[1].name} picks next - ${friends[1].story}. Now 2/8 (or 1/4) is shared.`,
      `${friends[2].name} chooses their slice - ${friends[2].story}. 3/8 of the pizza found a home.`,
      `${friends[3].name} takes their turn - ${friends[3].story}. Half the pizza is shared!`,
      `${friends[4].name}'s up next - ${friends[4].story}. 5/8 of the pizza is enjoyed.`,
      `${friends[5].name} grabs their slice - ${friends[5].story}. Now 6/8 (or 3/4) is shared.`,
      `${friends[6].name} picks their piece - ${friends[6].story}. Just one slice left!`,
      `Last slice goes to ${friends[7].name}, who ${friends[7].story}. The perfect end to a fun pizza party!`
    ];
    return stories[shared];
  };

  const handleShare = () => {
    if (sharedSlices < totalSlices) {
      setSharedSlices(sharedSlices + 1);
    }
  };

  const handleReset = () => {
    setSharedSlices(0);
  };

  const getFractionDisplay = (num) => {
    if (num === 0) return ""0"";
    if (num === 4) return ""1/2"";
    if (num === 2) return ""1/4"";
    if (num === 6) return ""3/4"";
    return `${num}/8`;
  };

  return (
    <div className=""p-6 bg-gray-100 rounded-lg"">
      <h2 className=""text-2xl font-bold text-red-600 text-center mb-6"">Pizza Party with Friends!</h2>
      <div className=""flex flex-col items-center gap-8"">
        <div className=""flex justify-center"">
          <PizzaWheel sharedSlices={sharedSlices} />
        </div>
        <div className=""flex flex-col items-center gap-4 max-w-2xl"">
          <p className=""text-lg text-center"">{generateStory(sharedSlices)}</p>
          <div className=""flex space-x-4"">
            <button
              onClick={handleShare}
              disabled={sharedSlices === totalSlices}
              className=""px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 disabled:bg-gray-400""
            >
              Share Next Slice
            </button>
            <button
              onClick={handleReset}
              className=""px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600""
            >
              Start New Pizza
            </button>
          </div>
          <p className=""text-md font-semibold"">
            Shared: {getFractionDisplay(sharedSlices)} ({Math.round((sharedSlices/totalSlices) * 100)}% of the pizza)
          </p>
        </div>
      </div>
    </div>
  );
};

export default PizzaSharing;"
Money management funds,"import React, { useState } from 'react';

const categories = [
  { color: '#4CAF50', name: 'Savings', icon: 'üè¶' },
  { color: '#FF9800', name: 'Toys', icon: 'üéÆ' },
  { color: '#2196F3', name: 'Books', icon: 'üìö' },
  { color: '#E91E63', name: 'Charity', icon: 'ü§ù' },
  { color: '#9C27B0', name: 'Snacks', icon: 'üç™' },
  { color: '#00BCD4', name: 'Movies', icon: 'üé¨' },
  { color: '#FFEB3B', name: 'Sports', icon: '‚öΩ' },
  { color: '#FF5722', name: 'Gifts', icon: 'üéÅ' },
];

const MoneyBox = ({ color, category, icon }) => (
  <svg width=""120"" height=""60"" viewBox=""0 0 120 60"" className=""transition-all duration-300"">
    <rect 
      x=""10"" 
      y=""10"" 
      width=""100"" 
      height=""40"" 
      fill={color} 
      stroke=""#333""
      strokeWidth=""2""
      rx=""10""
    />
    <text x=""60"" y=""35"" textAnchor=""middle"" fontSize=""20"">{icon}</text>
  </svg>
);

const MoneyManager = () => {
  const [allocatedFunds, setAllocatedFunds] = useState(0);
  const totalParts = 8;
  const allowance = 40; // $40 total allowance

  const generateStory = (allocated) => {
    const stories = [
      `You received your $${allowance} allowance! Let's plan how to use it wisely.`,
      `Put $${allowance/8} in ${categories[0].name}. That's 1/8 of your money planned!`,
      `Allocated $${allowance/8} for ${categories[1].name}. Now 2/8 (or 1/4) is planned.`,
      `Set aside $${allowance/8} for ${categories[2].name}. 3/8 of your allowance is organized.`,
      `Added $${allowance/8} to ${categories[3].name}. Half your money is planned!`,
      `Put $${allowance/8} towards ${categories[4].name}. 5/8 of your allowance is allocated.`,
      `Saved $${allowance/8} for ${categories[5].name}. Now 6/8 (or 3/4) is planned.`,
      `Added $${allowance/8} for ${categories[6].name}. Just one portion left!`,
      ""Great job planning your allowance! You're becoming money smart!""
    ];
    return stories[allocated];
  };

  const handleAllocate = () => {
    if (allocatedFunds < totalParts) {
      setAllocatedFunds(allocatedFunds + 1);
    }
  };

  const handleReset = () => {
    setAllocatedFunds(0);
  };

  return (
    <div className=""flex flex-col items-center space-y-4 p-4 bg-gray-100 rounded-lg"">
      <h2 className=""text-2xl font-bold text-green-600"">Money Management Adventure!</h2>
      <div className=""flex flex-col-reverse items-center space-y-2 space-y-reverse"" style={{ height: '480px' }}>
        {[...Array(totalParts)].map((_, i) => (
          <MoneyBox
            key={i}
            color={i < allocatedFunds ? categories[i].color : '#E0E0E0'}
            category={i < allocatedFunds ? categories[i].name : 'Unplanned'}
            icon={i < allocatedFunds ? categories[i].icon : 'üíµ'}
          />
        ))}
      </div>
      <p className=""text-lg text-center max-w-md"">{generateStory(allocatedFunds)}</p>
      <div className=""flex space-x-4"">
        <button
          onClick={handleAllocate}
          disabled={allocatedFunds === totalParts}
          className=""px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:bg-gray-400""
        >
          Allocate Funds
        </button>
        <button
          onClick={handleReset}
          className=""px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600""
        >
          Reset Budget
        </button>
      </div>
      <p className=""text-md font-semibold"">
        Allocated: ${(allocatedFunds * allowance/8).toFixed(2)} of ${allowance.toFixed(2)} ({allocatedFunds}/{totalParts} or {Math.round((allocatedFunds/totalParts) * 100)}%)
      </p>
    </div>
  );
};

export default MoneyManager;"
Rad Soccer Teams,"import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const EverlysRadSoccerTeams = () => {
  const [totalPlayers, setTotalPlayers] = useState(12);
  const [teamSize, setTeamSize] = useState(3);
  const [teams, setTeams] = useState([]);
  const [remainder, setRemainder] = useState(0);
  const [userAnswer, setUserAnswer] = useState('');
  const [isCorrect, setIsCorrect] = useState(null);
  const [showFeedback, setShowFeedback] = useState(false);
  
  const captains = ['Everly üé∏', 'Emelia üéÆ', 'Gina üèÑ‚Äç‚ôÄÔ∏è'];
  const playerEmojis = ['üßë‚Äçüé§', 'üïµÔ∏è', 'ü¶∏', 'ü•∑', 'üßö', 'üßô'];

  useEffect(() => {
    updateTeams();
  }, [totalPlayers, teamSize]);

  const updateTeams = () => {
    const newTeams = Math.floor(totalPlayers / teamSize);
    setTeams(Array.from({ length: newTeams }, (_, i) => i));
    setRemainder(totalPlayers % teamSize);
    setIsCorrect(null);
    setUserAnswer('');
    setShowFeedback(false);
  };

  const checkAnswer = () => {
    const correctAnswer = totalPlayers % teamSize === 0;
    const userAnswerBool = userAnswer.toLowerCase() === 'yes';
    setIsCorrect(userAnswerBool === correctAnswer);
    setShowFeedback(userAnswerBool === correctAnswer);
  };

  const NumberInput = ({ value, setValue, label, max }) => (
    <div className=""flex items-center space-x-2 bg-purple-800/30 p-2 rounded-lg"">
      <span className=""text-lg font-medium text-purple-100"">{label}</span>
      <Button 
        onClick={() => setValue(Math.max(1, value - 1))} 
        className=""bg-pink-600 hover:bg-pink-700 text-white font-bold h-8 w-8 rounded-full p-0""
      >
        -
      </Button>
      <span className=""text-xl font-bold text-purple-100 w-8 text-center"">{value}</span>
      <Button 
        onClick={() => setValue(Math.min(max, value + 1))} 
        className=""bg-pink-600 hover:bg-pink-700 text-white font-bold h-8 w-8 rounded-full p-0""
      >
        +
      </Button>
    </div>
  );

  return (
    <div className=""p-8 max-w-2xl mx-auto bg-gradient-to-br from-indigo-900 to-purple-900 rounded-xl shadow-xl text-white"">
      <h2 className=""text-4xl font-bold mb-8 text-center text-pink-300 drop-shadow-lg"">Everly's Rad Soccer Teams üèÜ</h2>
      
      <div className=""flex justify-between mb-8"">
        <NumberInput value={totalPlayers} setValue={setTotalPlayers} label=""Players:"" max={24} />
        <NumberInput value={teamSize} setValue={setTeamSize} label=""Team Size:"" max={12} />
      </div>
      
      <div className=""mt-10"">
        <h3 className=""text-3xl font-bold mb-6 text-center text-pink-300"">Epic Team Lineup üåü</h3>
        <div className=""flex flex-wrap justify-center gap-6"">
          {teams.map((_, index) => (
            <div key={index} className=""bg-indigo-800/50 p-6 rounded-lg shadow-md"">
              <p className=""font-bold mb-3 text-pink-300 text-xl"">{captains[index % 3]}</p>
              {Array.from({ length: teamSize }, (_, i) => (
                <span key={i} role=""img"" aria-label=""player"" className=""text-3xl mr-2"">
                  {playerEmojis[(index + i) % playerEmojis.length]}
                </span>
              ))}
            </div>
          ))}
        </div>
        {remainder > 0 && (
          <div className=""mt-8 text-center"">
            <p className=""font-bold text-pink-300 text-xl mb-3"">Subs Bench ü™ë</p>
            {Array.from({ length: remainder }, (_, i) => (
              <span key={i} role=""img"" aria-label=""sub player"" className=""text-3xl mr-2"">
                {playerEmojis[i % playerEmojis.length]}
              </span>
            ))}
          </div>
        )}
      </div>
      
      <div className=""mt-8 text-center"">
        <p className=""text-2xl font-bold text-pink-300 mb-4"">
          Is {teamSize} a factor of {totalPlayers}?
        </p>
        <p className=""text-sm italic mb-4 text-purple-200"">
          A factor is a number that divides evenly into another number with no remainder.
        </p>
        <div className=""flex justify-center items-center space-x-4"">
          <div className=""w-32 bg-white rounded-md shadow-md"">
            <Select onValueChange={(value) => setUserAnswer(value)}>
              <SelectTrigger className=""w-full bg-white text-indigo-900"">
                <SelectValue placeholder=""Select"" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value=""yes"">Yes</SelectItem>
                <SelectItem value=""no"">No</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <Button onClick={checkAnswer} className=""bg-pink-600 hover:bg-pink-700 text-white font-bold"">
            Check
          </Button>
        </div>
        {isCorrect !== null && (
          <p className={`mt-4 text-xl ${isCorrect ? 'text-green-400' : 'text-red-400'}`}>
            {isCorrect ? 'Correct! Great job! üéâ' : 'Not quite. Try again!'}
          </p>
        )}
        {showFeedback && (
          <div className=""mt-6 p-4 bg-indigo-700 rounded-lg"">
            <p className=""text-xl font-bold"">Awesome work! üåü</p>
            <p className=""mt-2"">
              You've got a great understanding of factors! Why not try some different combinations? 
              Can you find all the perfect matches where every player gets to play without any subs?
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default EverlysRadSoccerTeams;"
Aeryn's Enchanted Number Quest,"import React, { useState, useEffect } from 'react';
import { Heart, Home, Star, Moon, Sun, Cloud, Flower, Apple, Book, Feather } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

const TreeIcon = () => (
  <svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" strokeWidth=""2"" strokeLinecap=""round"" strokeLinejoin=""round"" className=""w-4 h-4"">
    <path d=""M12 3L4 13h4v8h8v-8h4L12 3z"" />
  </svg>
);

const ShoeIcon = () => (
  <svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" strokeWidth=""2"" strokeLinecap=""round"" strokeLinejoin=""round"" className=""w-4 h-4"">
    <path d=""M4 14h16c0-4-3-7-7-7C9 7 4 10 4 14z"" />
    <path d=""M4 14v6h16v-6"" />
  </svg>
);

const PlaceValue = ({ value, color, placeValue, onChange, icon: Icon, character }) => {
  const circles = Array(value).fill(null);
  const bgColor = `bg-${color}-200`;
  const textColor = `text-${color}-500`;
  const borderColor = `border-${color}-300`;

  return (
    <div className=""flex flex-col items-center"">
      <div className=""text-lg font-bold mb-1"">{character}</div>
      <div className=""text-3xl font-bold mb-2"">{value}</div>
      <div className={`w-28 h-40 border-2 ${borderColor} rounded-lg flex flex-wrap content-start justify-center p-2 relative bg-white`}>
        {circles.map((_, index) => (
          <div key={index} className={`w-7 h-7 ${bgColor} rounded-full m-1 shadow-sm flex items-center justify-center`}>
            <Icon className=""w-5 h-5 text-white"" />
          </div>
        ))}
        <div className=""absolute -bottom-4 left-0 right-0 flex justify-center space-x-2"">
          <Button 
            onClick={() => onChange(-1)} 
            className=""rounded-full p-1"" 
            variant=""outline""
            disabled={value === 0}
          >
            -
          </Button>
          <Button 
            onClick={() => onChange(1)} 
            className=""rounded-full p-1"" 
            variant=""outline""
            disabled={value === 9}
          >
            +
          </Button>
        </div>
      </div>
      <div className={`text-sm ${textColor} font-semibold mt-8`}>
        {placeValue}
      </div>
    </div>
  );
};

const items = [
  { name: 'magical gems', icon: Star },
  { name: 'enchanted flowers', icon: Flower },
  { name: 'mystical apples', icon: Apple },
  { name: 'glowing stars', icon: Star },
  { name: 'silver moons', icon: Moon },
  { name: 'golden suns', icon: Sun },
  { name: 'floating clouds', icon: Cloud },
  { name: 'wisdom books', icon: Book },
  { name: 'phoenix feathers', icon: Feather }
];

const generateQuestion = (itemName) => {
  const questions = [
    `Help Dorothy and her friends gather the right number of ${itemName} to unlock the next challenge!`,
    `The Wizard needs ${itemName} for his latest spell. Can you collect the correct amount?`,
    `Glinda the Good Witch requests ${itemName} for her magic potion. How many can you find?`,
    `The Emerald City requires ${itemName} to power its defenses. Gather the exact number!`,
    `The Munchkins are throwing a party and need ${itemName} for decorations. Can you help?`,
    `The Wicked Witch's castle is protected by ${itemName}. Collect the right number to break the spell!`,
    `Toto has hidden ${itemName} all over Oz. Can you find the exact number he's looking for?`,
    `The Yellow Brick Road needs ${itemName} for repairs. Gather the precise amount needed!`
  ];
  return questions[Math.floor(Math.random() * questions.length)];
};

export default function WizardOfOzPlaceValueAdventure() {
  const [placeValues, setPlaceValues] = useState([
    { value: 3, color: 'pink', placeValue: 'Thousands', icon: Star, character: 'Tin Man' },
    { value: 4, color: 'orange', placeValue: 'Hundreds', icon: Star, character: 'Dorothy' },
    { value: 7, color: 'green', placeValue: 'Tens', icon: Star, character: 'Scarecrow' },
    { value: 1, color: 'blue', placeValue: 'Ones', icon: Star, character: 'Lion' },
  ]);

  const [targetNumber, setTargetNumber] = useState(3571);
  const [showCongrats, setShowCongrats] = useState(false);
  const [currentItem, setCurrentItem] = useState(items[0]);
  const [currentQuestion, setCurrentQuestion] = useState(generateQuestion(items[0].name));

  const handleChange = (index, change) => {
    setPlaceValues(prev => {
      const newValues = [...prev];
      newValues[index].value = Math.max(0, Math.min(9, newValues[index].value + change));
      return newValues;
    });
  };

  const total = placeValues.reduce((sum, place, index) => sum + place.value * Math.pow(10, 3 - index), 0);

  const generateNewChallenge = () => {
    const newTarget = Math.floor(Math.random() * 9000) + 1000;
    setTargetNumber(newTarget);
    const newItem = items[Math.floor(Math.random() * items.length)];
    setCurrentItem(newItem);
    setCurrentQuestion(generateQuestion(newItem.name));
    setPlaceValues(prev => prev.map(place => ({ ...place, icon: newItem.icon })));
  };

  useEffect(() => {
    if (total === targetNumber) {
      setShowCongrats(true);
      const timer = setTimeout(() => {
        setShowCongrats(false);
        generateNewChallenge();
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [total, targetNumber]);

  return (
    <div className=""max-w-5xl mx-auto p-8 bg-indigo-100 rounded-lg border-4 border-purple-500"">
      <h1 className=""text-4xl font-bold text-center mb-6 text-purple-600"">Aeryn's Enchanted Number Quest</h1>
      <p className=""text-center mb-8 text-gray-700 text-xl"">{currentQuestion}</p>
      <div className=""flex justify-between mb-8 space-x-4"">
        {placeValues.map((place, index) => (
          <PlaceValue 
            key={index} 
            {...place} 
            onChange={(change) => handleChange(index, change)}
          />
        ))}
      </div>
      <div className=""flex justify-between items-center text-2xl mb-6"">
        {placeValues.map((place, index) => (
          <span key={index} className={`text-${place.color}-500 font-semibold w-28 text-center`}>
            {(place.value * Math.pow(10, 3 - index)).toLocaleString()}
          </span>
        ))}
      </div>
      <div className=""flex justify-center items-center text-2xl mb-6"">
        {placeValues.map((place, index) => (
          <React.Fragment key={index}>
            <span className={`text-${place.color}-500 font-semibold`}>
              {(place.value * Math.pow(10, 3 - index)).toLocaleString()}
            </span>
            {index < placeValues.length - 1 && <span className=""mx-2"">+</span>}
          </React.Fragment>
        ))}
      </div>
      <div className=""text-center mt-6"">
        {showCongrats ? (
          <Alert className=""bg-green-100 border-green-500"">
            <AlertTitle className=""text-green-700"">Congratulations!</AlertTitle>
            <AlertDescription className=""text-green-600"">
              You've collected the perfect number of {currentItem.name}! Get ready for the next challenge!
            </AlertDescription>
          </Alert>
        ) : (
          <>
            <p className=""text-2xl font-bold text-purple-600 mb-4"">
              Total {currentItem.name} collected: {total.toLocaleString()}
            </p>
            <p className=""text-xl text-gray-700"">
              Current Target: {targetNumber.toLocaleString()} {currentItem.name}
            </p>
          </>
        )}
      </div>
    </div>
  );
}"
Space mission,"import React, { useState, useEffect, useRef } from 'react';
import { AlertCircle, CheckCircle, Rocket, Droplet } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';

const SpaceStationFuelManagement = () => {
  const [tankA, setTankA] = useState(5);
  const [tankB, setTankB] = useState(5);
  const [feedback, setFeedback] = useState('');
  const [problem, setProblem] = useState('');
  const [isMore, setIsMore] = useState(false);
  const [difference, setDifference] = useState(2);
  const [isCorrect, setIsCorrect] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [targetB, setTargetB] = useState(0);

  const tankBRef = useRef(null);

  const MAX_UNITS = 10;

  useEffect(() => {
    generateNewProblem();
  }, []);

  const checkAnswer = () => {
    if (tankB === targetB) {
      setFeedback('Correct! Your space station is ready for the next mission!');
      setIsCorrect(true);
      setTimeout(() => {
        generateNewProblem();
      }, 2000);
    } else {
      setFeedback(`Not quite, astronaut! Check your calculations. Tank B should have ${targetB} units to be ${difference} unit${difference > 1 ? 's' : ''} ${isMore ? 'more' : 'less'} than Tank A.`);
      setIsCorrect(false);
    }
  };

  const generateNewProblem = () => {
    // Generate random Tank A value between 3 and 8
    // This ensures room for both addition and subtraction
    const newTankA = Math.floor(Math.random() * 6) + 3;
    
    // Generate random difference between 1 and 2
    const newDifference = Math.floor(Math.random() * 2) + 1;
    
    // Randomly decide if Tank B should be more or less
    const newIsMore = Math.random() < 0.5;
    
    setTankA(newTankA);
    setDifference(newDifference);
    setIsMore(newIsMore);
    
    // Calculate target value for Tank B
    const newTargetB = newIsMore ? 
      Math.min(newTankA + newDifference, MAX_UNITS) : 
      Math.max(newTankA - newDifference, 0);
    
    setTargetB(newTargetB);
    // Set initial Tank B to middle
    setTankB(5);
    setIsCorrect(null);
    setFeedback('');

    setProblem(`Adjust Fuel Tank B to have ${newDifference} unit${newDifference > 1 ? 's' : ''} ${newIsMore ? 'more' : 'less'} than Fuel Tank A (${newTankA} units).`);
  };

  const handleMouseDown = (e) => {
    setIsDragging(true);
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  const handleMouseMove = (e) => {
    if (isDragging && tankBRef.current) {
      const rect = tankBRef.current.getBoundingClientRect();
      const y = e.clientY - rect.top;
      const height = rect.height;
      let newLevel = Math.round(MAX_UNITS * (1 - y / height));
      newLevel = Math.max(0, Math.min(newLevel, MAX_UNITS));
      setTankB(newLevel);
    }
  };

  useEffect(() => {
    document.addEventListener('mouseup', handleMouseUp);
    document.addEventListener('mousemove', handleMouseMove);
    return () => {
      document.removeEventListener('mouseup', handleMouseUp);
      document.removeEventListener('mousemove', handleMouseMove);
    };
  }, [isDragging]);

  const renderTank = (units, label, color, ref = null) => (
    <div className=""text-center relative"">
      <div 
        className={`w-24 h-80 bg-white rounded-lg relative overflow-hidden border-4 border-black ${ref ? 'cursor-ns-resize' : ''}`}
        ref={ref}
        onMouseDown={ref ? handleMouseDown : undefined}
      >
        {/* Background grid lines - always visible */}
        {[...Array(MAX_UNITS + 1)].map((_, index) => (
          <div 
            key={`grid-${index}`}
            className=""absolute w-full h-8 border-t border-gray-300"" 
            style={{ bottom: `${(index / MAX_UNITS) * 100}%` }}
          />
        ))}
        
        {/* Colored fill */}
        <div 
          className={`absolute bottom-0 left-0 right-0 transition-all duration-200 ${color}`}
          style={{ height: `${(units / MAX_UNITS) * 100}%` }}
        />
        
        {/* Measurement lines and numbers - always on top */}
        {[...Array(MAX_UNITS + 1)].map((_, index) => (
          <React.Fragment key={`measure-${index}`}>
            <div 
              className=""absolute left-0 w-4 h-1 bg-black z-10"" 
              style={{ bottom: `${(index / MAX_UNITS) * 100}%`, transform: 'translateY(50%)' }}
            />
            <div 
              className=""absolute right-0 text-xs text-black font-bold z-10"" 
              style={{ bottom: `${(index / MAX_UNITS) * 100}%`, transform: 'translateY(50%)' }}
            >
              {index}
            </div>
          </React.Fragment>
        ))}
        
        {/* Static droplet for Tank A, Draggable marker for Tank B */}
        {!ref ? (
          <Droplet className=""absolute top-2 left-1/2 transform -translate-x-1/2 text-blue-700 z-20"" size={24} />
        ) : (
          <div 
            className=""absolute left-1/2 transform -translate-x-1/2 cursor-ns-resize transition-all duration-100 z-20""
            style={{ 
              top: `${((MAX_UNITS - tankB) / MAX_UNITS) * 100}%`,
            }}
          >
            <div className=""relative"">
              <Droplet 
                className={`text-blue-700 ${isDragging ? 'scale-125' : ''} transition-transform`} 
                size={32}
                fill={isDragging ? ""currentColor"" : ""none""}
              />
            </div>
          </div>
        )}
      </div>
      <p className=""mt-2 text-black font-bold"">{label}: {units} unit{units !== 1 ? 's' : ''}</p>
      {ref && (
        <p className=""mt-1 text-sm text-blue-700 font-semibold"">
          Drag to fill
        </p>
      )}
    </div>
  );

  return (
    <div className=""p-6 max-w-2xl mx-auto bg-white text-black rounded-xl shadow-lg"">
      <div className=""flex items-center justify-center mb-6"">
        <Rocket className=""mr-2 text-blue-700"" size={32} />
        <h1 className=""text-3xl font-bold text-black"">Space Station Fuel Management</h1>
      </div>
      
      <Alert className=""mb-6 bg-blue-100 border-blue-300 text-blue-900"">
        <AlertCircle className=""h-4 w-4 text-blue-700"" />
        <AlertTitle className=""text-blue-900 text-lg font-bold"">Mission Objective:</AlertTitle>
        <AlertDescription className=""text-lg"">{problem}</AlertDescription>
      </Alert>

      <div className=""mb-6 flex justify-around bg-gray-100 p-8 rounded-lg"">
        {renderTank(tankA, 'Fuel Tank A', 'bg-blue-600/50')}
        {renderTank(tankB, 'Fuel Tank B', isCorrect === false ? 'bg-red-500/50' : 'bg-green-600/50', tankBRef)}
      </div>

      <div className=""flex justify-center mb-6"">
        <Button 
          onClick={checkAnswer} 
          className=""bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full text-lg shadow-md transform transition duration-200 hover:scale-105""
        >
          Check Answer
        </Button>
      </div>

      {feedback && (
        <Alert variant={isCorrect ? 'default' : 'destructive'} className={`${isCorrect ? 'bg-green-100 text-green-900' : 'bg-red-100 text-red-900'}`}>
          {isCorrect ? <CheckCircle className=""h-4 w-4 text-green-700"" /> : <AlertCircle className=""h-4 w-4 text-red-700"" />}
          <AlertTitle>{isCorrect ? 'Mission Successful!' : 'Recalculation Needed'}</AlertTitle>
          <AlertDescription>{feedback}</AlertDescription>
        </Alert>
      )}
    </div>
  );
};

export default SpaceStationFuelManagement;"
Multiplication flashcards,"import React, { useState, useEffect } from 'react';
import { Crown, Star } from 'lucide-react';

const CandyMathRescue = () => {
  const [gameState, setGameState] = useState('idle');
  const [num1, setNum1] = useState(0);
  const [num2, setNum2] = useState(0);
  const [userAnswer, setUserAnswer] = useState('');
  const [score, setScore] = useState(0);
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [timeLeft, setTimeLeft] = useState(7);

  // Target score adjusted for 25 points per question (40 correct answers needed)
  const TARGET_SCORE = 1000;

  const candyColors = [
    'from-green-400 to-pink-400',  // Witch's colors
    'from-yellow-400 to-orange-400', // Princess's dress
    'from-pink-400 to-red-400',    // Candy cane stripes
    'from-blue-400 to-teal-400'    // Castle window
  ];
  const [currentColor, setCurrentColor] = useState(candyColors[0]);

  useEffect(() => {
    let timer;
    if (gameState === 'playing' && timeLeft > 0) {
      timer = setInterval(() => {
        setTimeLeft((prevTime) => prevTime - 1);
      }, 1000);
    } else if (timeLeft === 0 && gameState === 'playing') {
      checkAnswer();
    }
    return () => clearInterval(timer);
  }, [timeLeft, gameState]);

  useEffect(() => {
    if (score >= TARGET_SCORE) {
      setGameState('victory');
      setShowAlert(true);
      setAlertMessage('üéâ You broke the candy cage! The princess is free from the witch! üè∞');
    }
  }, [score]);

  const startGame = () => {
    setGameState('playing');
    setScore(0);
    generateNewProblem();
  };

  const generateNewProblem = () => {
    // Generate numbers between 3 and 10 only
    const getRandomNum = () => Math.floor(Math.random() * 8) + 3;
    setNum1(getRandomNum());
    setNum2(getRandomNum());
    setUserAnswer('');
    setCurrentColor(candyColors[Math.floor(Math.random() * candyColors.length)]);
    setTimeLeft(7);
  };

  const checkAnswer = () => {
    const correctAnswer = num1 * num2;
    if (parseInt(userAnswer) === correctAnswer) {
      setScore(score + 25);
      setAlertMessage('üç¨ Sweet magic! The cage weakens! +25 sugar points! üç≠');
    } else {
      setAlertMessage(`üßô‚Äç‚ôÄÔ∏è The witch cackles! The answer was ${correctAnswer}! Try again! ü™Ñ`);
    }
    setShowAlert(true);
    setTimeout(() => {
      setShowAlert(false);
      if (gameState === 'playing') {
        generateNewProblem();
      }
    }, 2000);
  };

  return (
    <div className=""flex flex-col items-center justify-center min-h-screen bg-gradient-to-b from-purple-600 to-pink-400 p-4 relative overflow-hidden"">
      {/* Candy decorations */}
      <div className=""absolute inset-0 z-0"">
        {/* Lollipops */}
        <div className=""absolute top-10 left-10 w-16 h-16 bg-gradient-to-r from-red-400 to-white rounded-full transform rotate-45 border-4 border-white""></div>
        <div className=""absolute top-20 right-10 w-20 h-20 bg-gradient-to-r from-green-400 to-white rounded-full transform -rotate-12 border-4 border-white""></div>
        {/* Candy spirals */}
        <div className=""absolute bottom-10 left-1/4 w-8 h-32 bg-gradient-to-b from-yellow-500 via-red-500 to-white transform rotate-45""></div>
        <div className=""absolute top-1/4 right-10 w-8 h-32 bg-gradient-to-b from-yellow-500 via-red-500 to-white transform -rotate-45""></div>
      </div>

      <div className=""z-10 bg-white bg-opacity-95 p-6 rounded-2xl shadow-xl w-full max-w-md border-4 border-pink-300"">
        <div className=""flex items-center justify-between mb-4"">
          <h1 className=""text-3xl font-bold text-green-600"">Witch's Candy Prison</h1>
          <Crown className=""h-8 w-8 text-yellow-400"" />
        </div>

        <div className=""mb-4"">
          <div className=""text-lg font-bold text-purple-600"">
            Break {TARGET_SCORE - score} more sugar crystals to free the princess! üëë
          </div>
        </div>

        {gameState === 'idle' && (
          <div className=""text-center p-4"">
            <div className=""mb-6 bg-gradient-to-b from-green-100 to-pink-100 p-4 rounded-xl border-2 border-green-300"">
              <h2 className=""text-xl font-bold text-purple-600 mb-2"">üßô‚Äç‚ôÄÔ∏è The Candy Witch's Challenge! üè∞</h2>
              <p className=""text-lg text-gray-700"">
                The wicked candy witch has trapped the princess in a sugary cage! Solve multiplication problems to break her sweet spell! Each correct answer earns 25 sugar points. But hurry - you only have 7 seconds before each spell strengthens!
              </p>
            </div>
            <button
              onClick={startGame}
              className=""bg-gradient-to-r from-green-500 to-pink-500 text-white px-8 py-3 rounded-full text-lg font-bold hover:from-green-600 hover:to-pink-600 transform hover:scale-105 transition-all shadow-lg""
            >
              Face the Candy Witch!
            </button>
          </div>
        )}

        {gameState === 'playing' && (
          <div className={`bg-gradient-to-r ${currentColor} rounded-xl shadow-lg p-6 w-full aspect-square flex flex-col items-center justify-center border-4 border-white`}>
            <div className=""text-6xl font-bold mb-4 text-white drop-shadow-lg"">
              {num1} √ó {num2}
            </div>
            <div className=""text-xl font-bold mb-4 text-white"">
              ‚è≥ Spell Timer: {timeLeft}s
            </div>
            <input
              type=""number""
              value={userAnswer}
              onChange={(e) => setUserAnswer(e.target.value)}
              className=""w-full p-4 text-2xl text-center rounded-lg border-4 border-white focus:outline-none focus:border-yellow-300 shadow-inner""
              placeholder=""Cast your counter-spell!""
            />
          </div>
        )}

        {gameState === 'victory' && (
          <div className=""text-center p-6 bg-gradient-to-r from-yellow-200 to-pink-200 rounded-xl border-4 border-yellow-300"">
            <div className=""flex justify-center mb-4"">
              <Star className=""h-16 w-16 text-yellow-500 animate-spin"" />
            </div>
            <h2 className=""text-2xl font-bold text-purple-700 mb-2"">
              üéâ The Princess is Free! üéâ
            </h2>
            <p className=""text-lg text-purple-600 mb-4"">
              You've outsmarted the candy witch with {score} sugar points! The princess can now escape her candy cage!
            </p>
            <button
              onClick={startGame}
              className=""bg-gradient-to-r from-green-500 to-pink-500 text-white px-6 py-2 rounded-full text-lg font-bold hover:from-green-600 hover:to-pink-600 transform hover:scale-105 transition-all""
            >
              Play Again!
            </button>
          </div>
        )}

        <div className=""mt-4 flex justify-between items-center"">
          <div className=""text-xl font-bold text-pink-600"">
            üç¨ Sugar Points: {score}
          </div>
          {gameState === 'playing' && (
            <button
              onClick={() => setGameState('idle')}
              className=""bg-green-500 text-white px-4 py-2 rounded-full text-sm font-bold hover:bg-green-600 transition-all shadow-md""
            >
              Flee Castle
            </button>
          )}
        </div>
      </div>

      {showAlert && (
        <div className=""fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-20"">
          <div className=""bg-white p-6 rounded-xl text-center border-4 border-pink-400 animate-bounce max-w-sm shadow-lg"">
            <h2 className=""text-xl font-bold mb-2 text-pink-600"">{alertMessage}</h2>
            {gameState === 'playing' && (
              <p className=""text-sm text-purple-600"">
                Keep breaking the witch's spells! üßô‚Äç‚ôÄÔ∏è‚ú®
              </p>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default CandyMathRescue;"
WIP: Fraction Division,"import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Input } from '@/components/ui/input';
import { RefreshCcw } from 'lucide-react';

const FractionDivisionJumps = () => {
  const [jumps, setJumps] = useState([]);
  const [message, setMessage] = useState(""Click along the number line to make jumps of 1/3"");
  const [showAnswer, setShowAnswer] = useState(false);
  const [showCountPrompt, setShowCountPrompt] = useState(false);
  const [hoverPosition, setHoverPosition] = useState(null);
  const [userAnswer, setUserAnswer] = useState('');
  const [feedback, setFeedback] = useState('');

  const addJump = (e) => {
    if (jumps.length >= 8) return;
    
    const rect = e.currentTarget.getBoundingClientRect();
    const x = (e.clientX - rect.left) / rect.width * 4;
    
    if (jumps.length === 0) {
      setJumps([1/3]);
      setMessage(""Great! Keep making jumps of 1/3"");
      return;
    }

    const newJump = Math.min(8/3, jumps[jumps.length - 1] + 1/3);
    setJumps([...jumps, newJump]);

    if (jumps.length === 4) {
      setShowCountPrompt(true);
      setMessage(""How many jumps have you made so far? Keep going!"");
    }

    if (jumps.length === 7) {
      setMessage(""You've reached 8/3! How many jumps did it take?"");
      setShowCountPrompt(true);
    }
  };

  const checkAnswer = () => {
    const numAnswer = parseInt(userAnswer);
    if (numAnswer === 8) {
      setFeedback(""Correct! 8/3 √∑ 1/3 = 8"");
    } else if (isNaN(numAnswer)) {
      setFeedback(""Please enter a number"");
    } else {
      setFeedback(""Not quite. Try counting the jumps again!"");
    }
  };

  const handleMouseMove = (e) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const x = (e.clientX - rect.left) / rect.width;
    setHoverPosition(x);
  };

  const handleMouseLeave = () => {
    setHoverPosition(null);
  };

  const reset = () => {
    setJumps([]);
    setShowAnswer(false);
    setShowCountPrompt(false);
    setMessage(""Click along the number line to make jumps of 1/3"");
    setUserAnswer('');
    setFeedback('');
  };

  const getFractionLabel = (num) => {
    if (num === 0) return ""0"";
    if (num === 1) return ""1"";
    if (num === 2) return ""2"";
    if (num === 3) return ""3"";
    if (num === 4) return ""4"";
    return `${num * 3}/3`;
  };

  return (
    <Card className=""w-full max-w-6xl mx-auto"">
      <CardHeader>
        <CardTitle className=""text-2xl mb-4"">Solve 8/3 √∑ 1/3 using jumps!</CardTitle>
        <div className=""text-lg"">
          Each jump represents 1/3. How many jumps does it take to reach 8/3?
        </div>
      </CardHeader>
      <CardContent>
        <div className=""flex flex-col items-center gap-8"">
          {/* Main visualization */}
          <div 
            className=""w-full h-96 bg-white p-4 relative cursor-pointer""
            onClick={addJump}
            onMouseMove={handleMouseMove}
            onMouseLeave={handleMouseLeave}
          >
            <svg className=""w-full h-full"">
              {/* Background grid lines */}
              {Array.from({ length: 12 }).map((_, i) => (
                <line 
                  key={`grid-${i}`}
                  x1={`${5 + (90 * (i+1)/12)}%`}
                  y1=""20%""
                  x2={`${5 + (90 * (i+1)/12)}%`}
                  y2=""75%""
                  stroke=""#f0f0f0""
                  strokeWidth=""1""
                  strokeDasharray=""4,4""
                />
              ))}

              {/* Main horizontal line */}
              <line 
                x1=""5%"" 
                y1=""70%"" 
                x2=""95%"" 
                y2=""70%"" 
                stroke=""black"" 
                strokeWidth=""3""
              />
              
              {/* Tick marks and fractions */}
              {Array.from({ length: 13 }).map((_, i) => {
                const x = 5 + (90 * i/12);
                return (
                  <g key={i}>
                    <line 
                      x1={`${x}%`}
                      y1=""65%""
                      x2={`${x}%`}
                      y2=""75%""
                      stroke=""black""
                      strokeWidth=""2""
                    />
                    <text 
                      x={`${x}%`}
                      y=""90%""
                      textAnchor=""middle""
                      className=""text-lg font-medium""
                    >
                      {getFractionLabel(i/3)}
                    </text>
                  </g>
                );
              })}
              
              {/* Jump arcs and dots */}
              {jumps.map((jump, i) => {
                const prevX = i === 0 ? 0 : jumps[i-1];
                const x1 = 5 + (90 * prevX/4);
                const x2 = 5 + (90 * jump/4);
                const controlY = 30;
                
                return (
                  <g key={i}>
                    <path
                      d={`M ${x1}% 70% C ${x1}% ${controlY}% ${x2}% ${controlY}% ${x2}% 70%`}
                      fill=""none""
                      stroke=""#6366F1""
                      strokeWidth=""3""
                      className=""jump-arc""
                    />
                    {/* Starting dot */}
                    <circle
                      cx={`${x1}%`}
                      cy=""70%""
                      r=""6""
                      fill=""#6366F1""
                      className=""jump-dot""
                    />
                    {/* Ending dot */}
                    <circle
                      cx={`${x2}%`}
                      cy=""70%""
                      r=""6""
                      fill=""#6366F1""
                      className=""jump-dot""
                    />
                    {/* Jump number */}
                    <text
                      x={`${(x1 + x2)/2}%`}
                      y={`${controlY + 5}%`}
                      textAnchor=""middle""
                      fill=""#4F46E5""
                      className=""text-sm font-bold""
                    >
                      Jump {i + 1}
                    </text>
                  </g>
                );
              })}

              {/* Hover indicator */}
              {hoverPosition !== null && jumps.length < 8 && (
                <line
                  x1={`${hoverPosition * 100}%`}
                  y1=""20%""
                  x2={`${hoverPosition * 100}%`}
                  y2=""75%""
                  stroke=""#6366F1""
                  strokeWidth=""2""
                  strokeDasharray=""4,4""
                  className=""animate-pulse""
                />
              )}
            </svg>
          </div>

          {/* Message area */}
          <Alert className=""w-full"">
            <AlertDescription className=""text-xl"">
              {message}
            </AlertDescription>
          </Alert>

          {/* Answer input area */}
          <div className=""flex items-center gap-4 w-full max-w-md"">
            <Input
              type=""number""
              placeholder=""Enter your answer""
              value={userAnswer}
              onChange={(e) => setUserAnswer(e.target.value)}
              className=""text-lg""
            />
            <Button 
              size=""lg""
              onClick={checkAnswer}
              className=""text-lg""
            >
              Check Answer
            </Button>
          </div>

          {/* Feedback area */}
          {feedback && (
            <div className={`text-xl text-center font-medium p-4 rounded-lg w-full ${
              feedback.startsWith('Correct') ? 'bg-green-50 text-green-700' : 'bg-orange-50 text-orange-700'
            }`}>
              {feedback}
            </div>
          )}

          {showCountPrompt && (
            <div className=""text-2xl font-bold text-purple-600 animate-bounce"">
              Count the jumps! üëÜ
            </div>
          )}

          {/* Controls */}
          <div className=""flex gap-6"">
            <Button 
              size=""lg""
              onClick={reset}
              className=""text-lg""
            >
              <RefreshCcw className=""w-5 h-5 mr-2"" />
              Start Over
            </Button>
            <Button
              size=""lg""
              variant=""outline""
              onClick={() => setShowAnswer(true)}
              className=""text-lg""
            >
              Show Answer
            </Button>
          </div>

          {/* Answer area */}
          {showAnswer && (
            <div className=""text-xl text-center font-medium bg-green-50 p-4 rounded-lg w-full"">
              It takes 8 jumps of 1/3 to reach 8/3, so 8/3 √∑ 1/3 = 8
            </div>
          )}
        </div>
      </CardContent>

      <style jsx>{`
        .jump-arc {
          animation: drawJump 0.5s ease-out forwards;
        }
        .jump-dot {
          animation: popIn 0.3s ease-out forwards;
        }
        @keyframes drawJump {
          from {
            stroke-dasharray: 1000;
            stroke-dashoffset: 1000;
          }
          to {
            stroke-dashoffset: 0;
          }
        }
        @keyframes popIn {
          from {
            transform: scale(0);
          }
          to {
            transform: scale(1);
          }
        }
      `}</style>
    </Card>
  );
};

export default FractionDivisionJumps;"
Aeryn's Magical Oz Adventure,"import React, { useState, useEffect } from 'react';
import { Star, Heart, Moon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

const PlaceValue = ({ value, color, placeValue, onChange, icon: Icon, character }) => {
  const circles = Array(value).fill(null);
  const bgColor = `bg-${color}-200`;
  const textColor = `text-${color}-500`;
  const borderColor = `border-${color}-300`;

  return (
    <div className=""flex flex-col items-center"">
      <div className=""text-lg font-bold mb-1 text-purple-600"">{character}</div>
      <div className=""text-3xl font-bold mb-2"">{value}</div>
      <div className={`w-28 h-40 border-2 ${borderColor} rounded-lg flex flex-wrap content-start justify-center p-2 relative bg-white`}>
        {circles.map((_, index) => (
          <div key={index} className={`w-7 h-7 ${bgColor} rounded-full m-1 shadow-sm flex items-center justify-center`}>
            <Icon className=""w-5 h-5 text-white"" />
          </div>
        ))}
        <div className=""absolute -bottom-4 left-0 right-0 flex justify-center space-x-2"">
          <Button 
            onClick={() => onChange(-1)} 
            className=""rounded-full p-1"" 
            variant=""outline""
            disabled={value === 0}
          >
            -
          </Button>
          <Button 
            onClick={() => onChange(1)} 
            className=""rounded-full p-1"" 
            variant=""outline""
            disabled={value === 9}
          >
            +
          </Button>
        </div>
      </div>
      <div className={`text-sm ${textColor} font-semibold mt-8`}>
        {placeValue}
      </div>
    </div>
  );
};

const items = [
  { name: 'magical crystals', icon: Star },
  { name: 'enchanted hearts', icon: Heart },
  { name: 'moonbeams', icon: Moon },
  { name: 'emerald stars', icon: Star },
  { name: 'rainbow gems', icon: Star }
];

const generateQuestion = (itemName) => {
  const questions = [
    `Dorothy and the Scarecrow need to collect ${itemName} for Glinda's spell. Can you help them?`,
    `Help our friends gather ${itemName} along the Yellow Brick Road!`,
    `Glinda needs exactly this many ${itemName} to create magical protection!`,
    `The Emerald City gates will open when we collect the right number of ${itemName}!`,
    `Our Oz friends need these ${itemName} to help light their way home!`
  ];
  return questions[Math.floor(Math.random() * questions.length)];
};

export default function AerynsOzAdventure() {
  const [placeValues, setPlaceValues] = useState([
    { value: 4, color: 'pink', placeValue: 'Tens', icon: Star, character: 'Dorothy' },
    { value: 5, color: 'purple', placeValue: 'Ones', icon: Star, character: 'Glinda' },
  ]);

  const [targetNumber, setTargetNumber] = useState(45);
  const [showCongrats, setShowCongrats] = useState(false);
  const [currentItem, setCurrentItem] = useState(items[0]);
  const [currentQuestion, setCurrentQuestion] = useState(generateQuestion(items[0].name));

  const handleChange = (index, change) => {
    setPlaceValues(prev => {
      const newValues = [...prev];
      newValues[index].value = Math.max(0, Math.min(9, newValues[index].value + change));
      return newValues;
    });
  };

  const total = placeValues.reduce((sum, place, index) => sum + place.value * Math.pow(10, 1 - index), 0);

  const generateNewChallenge = () => {
    const newTarget = Math.floor(Math.random() * 90) + 10; // Generate number between 10 and 99
    setTargetNumber(newTarget);
    const newItem = items[Math.floor(Math.random() * items.length)];
    setCurrentItem(newItem);
    setCurrentQuestion(generateQuestion(newItem.name));
    setPlaceValues(prev => prev.map(place => ({ ...place, icon: newItem.icon })));
  };

  useEffect(() => {
    if (total === targetNumber) {
      setShowCongrats(true);
      const timer = setTimeout(() => {
        setShowCongrats(false);
        generateNewChallenge();
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [total, targetNumber]);

  return (
    <div className=""max-w-3xl mx-auto p-8 bg-yellow-50 rounded-lg border-4 border-emerald-500"">
      <h1 className=""text-4xl font-bold text-center mb-6 text-emerald-600"">Aeryn's Magical Oz Adventure</h1>
      <p className=""text-center mb-8 text-purple-700 text-xl"">{currentQuestion}</p>
      <div className=""flex justify-center mb-8 space-x-16"">
        {placeValues.map((place, index) => (
          <PlaceValue 
            key={index} 
            {...place} 
            onChange={(change) => handleChange(index, change)}
          />
        ))}
      </div>
      <div className=""flex justify-center items-center text-2xl mb-6"">
        {placeValues.map((place, index) => (
          <React.Fragment key={index}>
            <span className={`text-${place.color}-500 font-semibold`}>
              {place.value * Math.pow(10, 1 - index)}
            </span>
            {index < placeValues.length - 1 && <span className=""mx-2"">+</span>}
          </React.Fragment>
        ))}
        <span className=""mx-2"">=</span>
        <span className=""text-gray-700"">{total}</span>
      </div>
      <div className=""text-center mt-6"">
        {showCongrats ? (
          <Alert className=""bg-emerald-100 border-emerald-500"">
            <AlertTitle className=""text-emerald-700"">Wonderful magic, Aeryn! ‚ú®</AlertTitle>
            <AlertDescription className=""text-emerald-600"">
              You've helped collect exactly {targetNumber} {currentItem.name}! The Yellow Brick Road leads to another adventure!
            </AlertDescription>
          </Alert>
        ) : (
          <>
            <p className=""text-gray-700 text-2xl mb-4"">
              Magical items collected: {total}
            </p>
            <p className=""text-xl"">
              <span className=""text-purple-700"">Target: </span>
              <span className=""font-bold text-emerald-600"">{targetNumber}</span>
              <span className=""text-purple-700""> {currentItem.name}</span>
            </p>
          </>
        )}
      </div>
    </div>
  );
}"
WIP: Placeholder value,"import React, { useState, useEffect } from 'react';
import { Anchor, Shield, Zap, Hammer, Wrench, Radar, Cog, Timer, Target } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';

const PlaceValue = ({ value, color, placeValue, onChange, icon: Icon, character }) => {
  const circles = Array(value).fill(null);
  const bgColor = `bg-${color}-200`;
  const textColor = `text-${color}-500`;
  const borderColor = `border-${color}-300`;

  // Visual grouping of items in sets of 3
  const groupedCircles = [];
  for (let i = 0; i < circles.length; i += 3) {
    groupedCircles.push(circles.slice(i, i + 3));
  }

  return (
    <div className=""flex flex-col items-center"">
      <div className=""text-2xl font-bold mb-4"">{character}</div>
      <div className=""text-4xl font-bold mb-4"">{value}</div>
      <div className={`w-32 h-48 border-2 ${borderColor} rounded-lg flex flex-col content-start items-center p-2 relative bg-blue-50`}>
        {groupedCircles.map((group, groupIndex) => (
          <div key={groupIndex} className=""flex mb-2"">
            {group.map((_, index) => (
              <div key={index} className={`w-8 h-8 ${bgColor} rounded-full mx-1 shadow-sm flex items-center justify-center`}>
                <Icon className=""w-6 h-6 text-white"" />
              </div>
            ))}
          </div>
        ))}
        {value === 0 && (
          <div className=""text-sm text-gray-500 italic mt-2"">Empty box = zero!</div>
        )}
        <div className=""absolute -bottom-4 left-0 right-0 flex justify-center space-x-2"">
          <Button 
            onClick={() => onChange(-1)} 
            className=""rounded-lg w-10 h-10 text-lg font-bold""
            variant=""outline""
            disabled={value === 0}
          >
            -
          </Button>
          <Button 
            onClick={() => onChange(1)} 
            className=""rounded-lg w-10 h-10 text-lg font-bold""
            variant=""outline""
            disabled={value === 9}
          >
            +
          </Button>
        </div>
      </div>
      <div className={`text-xl ${textColor} font-semibold mt-8`}>
        {placeValue}
      </div>
      <div className=""text-xl text-gray-600 mt-2"">
        {value * Math.pow(10, placeValue === 'Thousands' ? 3 : placeValue === 'Hundreds' ? 2 : placeValue === 'Tens' ? 1 : 0)}
      </div>
    </div>
  );
};

const ProgressBar = ({ current, target }) => {
  const progress = Math.min(100, (current / target) * 100);
  return (
    <div className=""w-full mt-4"">
      <Progress value={progress} className=""h-2"" />
      <div className=""flex justify-between text-sm text-gray-600 mt-1"">
        <span>0</span>
        <span>{target}</span>
      </div>
    </div>
  );
};

export default function SharkDefenseCommand() {
  const [placeValues, setPlaceValues] = useState([
    { value: 2, color: 'cyan', placeValue: 'Thousands', icon: Zap, character: 'Commander Shark' },
    { value: 7, color: 'teal', placeValue: 'Hundreds', icon: Zap, character: 'Agent Finn' },
    { value: 2, color: 'blue', placeValue: 'Tens', icon: Zap, character: 'Tech Shark' },
    { value: 9, color: 'indigo', placeValue: 'Ones', icon: Zap, character: 'Rookie Shark' }
  ]);
  
  const [targetNumber, setTargetNumber] = useState(2729);
  const [showSuccess, setShowSuccess] = useState(false);
  const [attempts, setAttempts] = useState(0);

  const total = placeValues.reduce((sum, place, index) => sum + place.value * Math.pow(10, 3 - index), 0);

  const handleChange = (index, change) => {
    setAttempts(prev => prev + 1);
    setPlaceValues(prev => {
      const newValues = [...prev];
      newValues[index].value = Math.max(0, Math.min(9, newValues[index].value + change));
      return newValues;
    });
  };

  useEffect(() => {
    if (total === targetNumber) {
      setShowSuccess(true);
      const timer = setTimeout(() => {
        setShowSuccess(false);
        // Generate new target number
        setTargetNumber(Math.floor(Math.random() * 9000) + 1000);
        setAttempts(0);
      }, 4000);
      return () => clearTimeout(timer);
    }
  }, [total, targetNumber]);

  return (
    <div className=""max-w-6xl mx-auto p-8 bg-blue-50 min-h-screen"">
      <div className=""flex justify-between items-start mb-8 space-x-4 mt-8"">
        {placeValues.map((place, index) => (
          <PlaceValue 
            key={index} 
            {...place} 
            onChange={(change) => handleChange(index, change)}
          />
        ))}
      </div>

      <div className=""mt-8"">
        {showSuccess ? (
          <Alert className=""bg-green-100 border-green-500"">
            <AlertTitle className=""text-green-700"">
              üéâ Mission Accomplished! üéâ
            </AlertTitle>
            <AlertDescription className=""text-green-600"">
              Outstanding work, Agent! You've secured exactly {targetNumber.toLocaleString()} power crystals!
              {attempts <= 5 && "" And you did it super quickly!""}
              <br />
              Get ready for your next mission...
            </AlertDescription>
          </Alert>
        ) : (
          <div className=""text-center"">
            <p className=""text-3xl font-bold text-blue-700 mb-4"">
              Resources Secured: {total.toLocaleString()} power crystals
            </p>
            <ProgressBar current={total} target={targetNumber} />
          </div>
        )}
      </div>
    </div>
  );
}"
Haunted house adventure ,"import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Star, HelpCircle, Sparkles } from 'lucide-react';

const GhostBuster = () => {
  const locations = [
    {
      name: ""Enchanted Garden"",
      description: ""A magical garden where friendly number sprites play hide and seek..."",
      theme: ""from-green-400 to-blue-500"",
      icon: ""üå∏"",
      friendEmoji: ""ü¶ã""
    },
    {
      name: ""Rainbow Castle"",
      description: ""A sparkling castle where number magic comes to life..."",
      theme: ""from-purple-400 to-pink-500"",
      icon: ""üè∞"",
      friendEmoji: ""‚ú®""
    },
    {
      name: ""Cloud Kingdom"",
      description: ""Where playful number fairies dance among fluffy clouds!"",
      theme: ""from-blue-300 to-purple-400"",
      icon: ""‚òÅÔ∏è"",
      friendEmoji: ""üåü""
    }
  ];

  const [ghosts, setGhosts] = useState([]);
  const [score, setScore] = useState(0);
  const [level, setLevel] = useState(1);
  const [question, setQuestion] = useState(null);
  const [answer, setAnswer] = useState('');
  const [feedback, setFeedback] = useState('');
  const [gameState, setGameState] = useState('ready');
  const [shake, setShake] = useState(false);
  const [currentLocation, setCurrentLocation] = useState(0);
  const [story, setStory] = useState('');
  const [foundFactors, setFoundFactors] = useState([]);
  const [hintsRemaining, setHintsRemaining] = useState(3);
  const [showHint, setShowHint] = useState(false);

  const generateStory = (locationIndex, level) => {
    const stories = [
      `Level ${level}: Welcome to the ${locations[locationIndex].name}! ${level === 1 ? ""Let's start our magical adventure!"" : ""More number magic awaits...""}`,
      `The ${locations[locationIndex].friendEmoji} number sprites are playing hide and seek! Can you help find them all?`,
      `Hey Dallas! The friendly sprites in ${locations[locationIndex].name} need your help with some number magic!`
    ];
    return stories[Math.floor(Math.random() * stories.length)];
  };

  const generateGhosts = () => {
    // Generate a number between 40-100
    const number = Math.floor(Math.random() * 61) + 40;
    const factors = Array.from(Array(number + 1), (_, i) => i)
      .filter(i => number % i === 0);
    
    setQuestion({
      number,
      text: `${locations[currentLocation].name} Challenge: The magical number ${number} has special friends! Can you find ALL its factors to help the ${factors.length} number sprites?`,
      answer: factors,
      hint: `Try dividing ${number} by small numbers first... ${factors[1]} is a friendly number!`
    });
    setGhosts(Array(factors.length).fill({ defeated: false }));
    setFoundFactors([]);
    setStory(generateStory(currentLocation, level));
    setHintsRemaining(3);
    setShowHint(false);
  };

  // [Previous game logic functions remain the same]
  const startGame = () => {
    setGameState('playing');
    setScore(0);
    setLevel(1);
    setCurrentLocation(0);
    generateGhosts();
  };

  const checkAnswer = () => {
    const userNumber = parseInt(answer.trim());
    if (isNaN(userNumber)) {
      setFeedback(""Please enter a number!"");
      return;
    }

    if (question.answer.includes(userNumber) && !foundFactors.includes(userNumber)) {
      playSound('ghost');
      setFoundFactors([...foundFactors, userNumber]);
      setGhosts(prev => {
        const newGhosts = [...prev];
        const firstAlive = newGhosts.findIndex(g => !g.defeated);
        if (firstAlive !== -1) {
          newGhosts[firstAlive] = { defeated: true };
        }
        return newGhosts;
      });
      setFeedback(`WONDERFUL! ${userNumber} is a factor friend! ${question.answer.length - foundFactors.length - 1} sprites to go!`);
      
      if (foundFactors.length + 1 === question.answer.length) {
        playSound('victory');
        if (currentLocation === locations.length - 1) {
          setLevel(level + 1);
          setCurrentLocation(0);
        } else {
          setCurrentLocation(currentLocation + 1);
        }
        setGameState('victory');
        setScore(score + question.answer.length);
      }
    } else if (foundFactors.includes(userNumber)) {
      playSound('wrong');
      setShake(true);
      setTimeout(() => setShake(false), 500);
      setFeedback(`You've already found ${userNumber}! Try another number friend!`);
    } else {
      playSound('wrong');
      setShake(true);
      setTimeout(() => setShake(false), 500);
      setFeedback(`${userNumber} isn't a factor of our magical number. Keep trying!`);
    }
    setAnswer('');
  };

  const useHint = () => {
    if (hintsRemaining > 0) {
      setHintsRemaining(prev => prev - 1);
      setShowHint(true);
      setTimeout(() => setShowHint(false), 5000);
    }
  };

  const playSound = (type) => {
    const audio = new Audio();
    switch(type) {
      case 'ghost':
        audio.src = 'data:audio/wav;base64,UklGRmR...';
        break;
      case 'victory':
        audio.src = 'data:audio/wav;base64,UklGRmR...';
        break;
      case 'wrong':
        audio.src = 'data:audio/wav;base64,UklGRmR...';
        break;
    }
    audio.play().catch(e => console.log('Audio play failed:', e));
  };

  return (
    <Card className={`w-full max-w-4xl bg-gradient-to-b ${locations[currentLocation].theme} p-6 text-white transition-colors duration-1000`}>
      <CardContent>
        <div className=""text-center mb-6"">
          <h1 className=""text-5xl font-bold mb-4 text-yellow-300 font-magical"">
            Dallas's Magic School of Numbers 
            <span className=""text-5xl ml-2"">{locations[currentLocation].icon}</span>
          </h1>
          <div className=""flex justify-center items-center gap-4 text-2xl"">
            <Star className=""text-yellow-300 w-8 h-8"" />
            <span>Level {level} - {locations[currentLocation].name}</span>
            <Star className=""text-yellow-300 w-8 h-8"" />
          </div>
          <div className=""text-xl mt-2 text-yellow-200"">
            Magic Stars Collected: {score}
          </div>
        </div>

        {gameState === 'ready' && (
          <div className=""text-center space-y-6"">
            <h2 className=""text-3xl mb-4"">Ready for a magical adventure, Dallas?</h2>
            <p className=""text-xl mb-4"">{locations[0].description}</p>
            <Button 
              onClick={startGame}
              className=""bg-yellow-500 hover:bg-yellow-400 text-2xl p-6 text-purple-900""
            >
              Start the Magic! {locations[0].friendEmoji}
            </Button>
          </div>
        )}

        {gameState === 'playing' && (
          <div className=""space-y-6"">
            <div className=""text-xl italic text-center mb-4 text-white"">
              {story}
            </div>
            
            <div className=""grid grid-cols-5 gap-4 mb-6"">
              {ghosts.map((ghost, index) => (
                <div 
                  key={index}
                  className={`text-6xl ${ghost.defeated ? 'animate-bounce-out opacity-50' : 'animate-float'}`}
                >
                  {ghost.defeated ? '‚≠ê' : locations[currentLocation].friendEmoji}
                </div>
              ))}
            </div>

            <div className={`rounded-lg p-6 bg-white bg-opacity-20 shadow-lg ${shake ? 'animate-shake' : ''}`}>
              <p className=""text-2xl mb-4"">{question?.text}</p>
              <div className=""flex gap-2"">
                <input 
                  type=""text"" 
                  value={answer}
                  onChange={(e) => setAnswer(e.target.value)}
                  placeholder=""Enter one factor...""
                  className=""flex-1 p-4 text-xl rounded bg-white bg-opacity-30 text-white border-yellow-300 border-2 placeholder-white placeholder-opacity-70""
                  onKeyPress={(e) => e.key === 'Enter' && checkAnswer()}
                />
                <Button 
                  onClick={checkAnswer}
                  className=""bg-yellow-500 hover:bg-yellow-400 text-xl p-6 text-purple-900""
                >
                  Find Friend! üåà
                </Button>
              </div>
              
              <div className=""mt-4 flex justify-between items-center"">
                <div className=""text-white"">
                  Found friends: {foundFactors.join(', ')}
                </div>
                <Button
                  onClick={useHint}
                  disabled={hintsRemaining === 0}
                  className=""bg-purple-500 hover:bg-purple-400 text-white""
                >
                  <HelpCircle className=""mr-2"" />
                  Magic Hints: {hintsRemaining}
                </Button>
              </div>
              
              {showHint && (
                <div className=""mt-4 p-3 bg-purple-500 bg-opacity-50 rounded-lg text-white"">
                  {question?.hint}
                </div>
              )}
            </div>
          </div>
        )}

        {gameState === 'victory' && (
          <div className=""text-center animate-victory space-y-6"">
            <h2 className=""text-4xl mb-4"">üåà MAGICAL SUCCESS! üåà</h2>
            <p className=""text-2xl mb-6"">
              {currentLocation === locations.length - 1 
                ? `Amazing work! Level ${level} complete! Ready for more magical challenges?`
                : `${locations[currentLocation].name} is sparkling with joy! ${locations[currentLocation + 1].name} awaits your number magic!`}
            </p>
            <Button 
              onClick={() => {
                setGameState('playing');
                generateGhosts();
              }}
              className=""bg-yellow-500 hover:bg-yellow-400 text-2xl p-6 text-purple-900""
            >
              {currentLocation === locations.length - 1 ? 'Next Adventure! üåà' : 'Continue Magic! ‚ú®'}
            </Button>
          </div>
        )}

        {feedback && (
          <div className=""mt-4 text-2xl text-center p-4 rounded-lg bg-white bg-opacity-20 text-white animate-feedback"">
            {feedback}
          </div>
        )}
      </CardContent>

      <style jsx>{`
        @keyframes bounce-out {
          0% { transform: scale(1); opacity: 1; }
          50% { transform: scale(1.4); opacity: 0.5; }
          100% { transform: scale(0); opacity: 0; }
        }
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          25% { transform: translateX(-10px); }
          75% { transform: translateX(10px); }
        }
        @keyframes victory {
          0% { transform: scale(0.8); opacity: 0; }
          100% { transform: scale(1); opacity: 1; }
        }
        @keyframes feedback {
          0% { transform: translateY(20px); opacity: 0; }
          100% { transform: translateY(0); opacity: 1; }
        }
        @keyframes float {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-10px) rotate(5deg); }
        }
        .animate-bounce-out {
          animation: bounce-out 0.5s forwards;
        }
        .animate-shake {
          animation: shake 0.5s;
        }
        .animate-victory {
          animation: victory 0.5s;
        }
        .animate-feedback {
          animation: feedback 0.3s;
        }
        .animate-float {
          animation: float 2s ease-in-out infinite;
        }
        .font-magical {
          text-shadow: 0 0 10px #ffd700, 0 0 20px #ffd700;
        }
      `}</style>
    </Card>
  );
};

export default GhostBuster;"
Soccer and fractions,"import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Trophy, Heart } from 'lucide-react';

const AliziannasSoccerGame = () => {
  const [gameState, setGameState] = useState({
    aliTeamScore: 0,
    opponentScore: 0,
    difficulty: 'medium',
    lives: 3,
    timeLeft: 600, // 10 minutes in seconds
    isPlaying: false,
    ballPosition: 50, // percentage from left
    ballAnimation: false
  });

  const [userAnswer, setUserAnswer] = useState({ numerator: '', denominator: '' });
  const [problem, setProblem] = useState(null);
  const [message, setMessage] = useState('');
  const [showHint, setShowHint] = useState(false);

  // Timer logic
  useEffect(() => {
    let timer;
    if (gameState.isPlaying && gameState.timeLeft > 0) {
      timer = setInterval(() => {
        setGameState(prev => ({
          ...prev,
          timeLeft: prev.timeLeft - 1
        }));
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [gameState.isPlaying, gameState.timeLeft]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const generateProblem = (difficulty) => {
    let num1, num2, den1, den2, operation;

    switch(difficulty) {
      case 'easy':
        // Same denominators, simple numbers
        den1 = den2 = [2, 4, 6][Math.floor(Math.random() * 3)];
        num1 = Math.floor(Math.random() * (den1 - 1)) + 1;
        num2 = Math.floor(Math.random() * (den1 - 1)) + 1;
        operation = '+';
        break;
      
      case 'medium':
        // Related denominators or simple different denominators
        den1 = [2, 3, 4][Math.floor(Math.random() * 3)];
        den2 = den1 * 2;
        num1 = Math.floor(Math.random() * (den1 - 1)) + 1;
        num2 = Math.floor(Math.random() * (den2 - 1)) + 1;
        operation = Math.random() < 0.7 ? '+' : '-';
        break;
      
      case 'hard':
        // Different denominators, more complex numbers
        den1 = [3, 4, 6, 8][Math.floor(Math.random() * 4)];
        den2 = [3, 4, 6, 8][Math.floor(Math.random() * 4)];
        num1 = Math.floor(Math.random() * (den1 - 1)) + 1;
        num2 = Math.floor(Math.random() * (den2 - 1)) + 1;
        operation = Math.random() < 0.5 ? '+' : '-';
        break;
    }

    return {
      fraction1: { num: num1, den: den1 },
      fraction2: { num: num2, den: den2 },
      operation,
      difficulty
    };
  };

  const calculateAnswer = (problem) => {
    const { fraction1, fraction2, operation } = problem;
    const lcm = getLCM(fraction1.den, fraction2.den);
    
    const num1 = fraction1.num * (lcm / fraction1.den);
    const num2 = fraction2.num * (lcm / fraction2.den);
    
    const resultNum = operation === '+' ? num1 + num2 : num1 - num2;
    const gcd = getGCD(Math.abs(resultNum), lcm);
    
    return {
      num: resultNum / gcd,
      den: lcm / gcd
    };
  };

  const getLCM = (a, b) => (a * b) / getGCD(a, b);
  const getGCD = (a, b) => b === 0 ? a : getGCD(b, a % b);

  const handleSubmit = () => {
    const correctAnswer = calculateAnswer(problem);
    const isCorrect = 
      parseInt(userAnswer.numerator) === correctAnswer.num && 
      parseInt(userAnswer.denominator) === correctAnswer.den;

    // Animate ball
    setGameState(prev => ({
      ...prev,
      ballAnimation: true,
      ballPosition: isCorrect ? 100 : 0
    }));

    setTimeout(() => {
      if (isCorrect) {
        setGameState(prev => ({
          ...prev,
          aliTeamScore: prev.aliTeamScore + 1,
          difficulty: 'hard',
          ballAnimation: false,
          ballPosition: 50
        }));
        setMessage(""GOOOOOAL! Brilliant work, Alizianna! üåü‚öΩ"");
      } else {
        setGameState(prev => ({
          ...prev,
          opponentScore: prev.opponentScore + 1,
          difficulty: 'easy',
          lives: prev.lives - 1,
          ballAnimation: false,
          ballPosition: 50
        }));
        const hint = ""Let's try an easier one. Remember: "" + 
          getHintForDifficulty(problem.difficulty);
        setMessage(hint);
        setShowHint(true);
      }

      setUserAnswer({ numerator: '', denominator: '' });
      setTimeout(() => {
        setProblem(generateProblem(gameState.difficulty));
        setShowHint(false);
      }, 1500);
    }, 1000);
  };

  const getHintForDifficulty = (difficulty) => {
    switch(difficulty) {
      case 'easy':
        return ""With same denominators, we just add/subtract the top numbers!"";
      case 'medium':
        return ""Look for a common denominator between these fractions."";
      case 'hard':
        return ""Find the least common multiple of the denominators first."";
      default:
        return ""Take your time and break it down step by step."";
    }
  };

  const startGame = () => {
    setGameState(prev => ({
      ...prev,
      isPlaying: true
    }));
    setProblem(generateProblem('medium'));
  };

  // Create an array of the current lives
  const livesArray = Array.from({ length: Math.max(0, gameState.lives) }, (_, index) => index);

  return (
    <Card className=""w-full max-w-3xl mx-auto bg-gradient-to-b from-blue-100 to-green-100"">
      <CardContent className=""p-6"">
        <div className=""text-center mb-6"">
          <h1 className=""text-3xl font-bold mb-2"">Alizianna's Soccer Championship</h1>
          <div className=""flex justify-between items-center mb-4"">
            <div className=""flex items-center gap-2"">
              <Trophy className=""w-6 h-6 text-yellow-500"" />
              <span className=""font-bold"">Team Ali: {gameState.aliTeamScore}</span>
            </div>
            <div className=""flex items-center gap-2"">
              <div className=""flex"">
                {livesArray.map((i) => (
                  <Heart key={i} className=""w-5 h-5 text-red-500"" />
                ))}
              </div>
              <span className=""font-bold text-xl"">{formatTime(gameState.timeLeft)}</span>
            </div>
            <div>
              <span className=""font-bold"">Opponents: {gameState.opponentScore}</span>
            </div>
          </div>
        </div>

        <div className=""relative w-full h-32 bg-green-600 rounded-lg mb-4 overflow-hidden"">
          {/* Soccer field markings */}
          <div className=""absolute w-full h-full border-2 border-white rounded-lg"">
            <div className=""absolute left-1/2 top-1/2 w-16 h-16 border-2 border-white rounded-full transform -translate-x-1/2 -translate-y-1/2""></div>
            <div className=""absolute left-0 top-1/2 w-8 h-16 border-2 border-white transform -translate-y-1/2""></div>
            <div className=""absolute right-0 top-1/2 w-8 h-16 border-2 border-white transform -translate-y-1/2""></div>
          </div>
          
          {/* Animated ball */}
          <div 
            className={`absolute top-1/2 transform -translate-y-1/2 transition-all duration-1000 ${gameState.ballAnimation ? 'ease-in-out' : ''}`}
            style={{
              left: `${gameState.ballPosition}%`,
              transform: `translate(-50%, -50%) ${gameState.ballAnimation ? 'rotate(360deg)' : ''}`
            }}
          >
            <div className=""w-6 h-6 bg-white rounded-full border-2 border-black""></div>
          </div>
        </div>

        {!gameState.isPlaying ? (
          <div className=""text-center"">
            <Button 
              onClick={startGame}
              className=""bg-blue-500 hover:bg-blue-600""
            >
              Start Game! ‚öΩ
            </Button>
          </div>
        ) : (
          problem && (
            <div className=""space-y-6"">
              <div className=""text-center text-2xl font-bold"">
                <span className=""inline-block bg-white p-3 rounded-lg shadow"">
                  {problem.fraction1.num}/{problem.fraction1.den}
                </span>
                <span className=""mx-4 text-3xl"">{problem.operation}</span>
                <span className=""inline-block bg-white p-3 rounded-lg shadow"">
                  {problem.fraction2.num}/{problem.fraction2.den}
                </span>
              </div>

              <div className=""flex justify-center items-center gap-4"">
                <Input
                  type=""number""
                  value={userAnswer.numerator}
                  onChange={(e) => setUserAnswer(prev => ({...prev, numerator: e.target.value}))}
                  className=""w-20 text-center text-lg""
                  placeholder=""?""
                />
                <div className=""text-2xl font-bold"">/</div>
                <Input
                  type=""number""
                  value={userAnswer.denominator}
                  onChange={(e) => setUserAnswer(prev => ({...prev, denominator: e.target.value}))}
                  className=""w-20 text-center text-lg""
                  placeholder=""?""
                />
                <Button 
                  onClick={handleSubmit}
                  className=""ml-4 bg-blue-500 hover:bg-blue-600""
                  disabled={gameState.ballAnimation}
                >
                  Shoot! ‚öΩ
                </Button>
              </div>

              {message && (
                <Alert className={`mt-4 ${showHint ? 'bg-yellow-100' : 'bg-green-100'}`}>
                  <AlertDescription className=""text-center text-lg"">
                    {message}
                  </AlertDescription>
                </Alert>
              )}
            </div>
          )
        )}
      </CardContent>
    </Card>
  );
};

export default AliziannasSoccerGame;"
"Animal kingdom tournament, volleyball","import React, { useState, useEffect } from 'react';
import { Button } from ""@/components/ui/button"";
import { Input } from ""@/components/ui/input"";
import { Card, CardContent } from ""@/components/ui/card"";
import { Alert, AlertDescription } from ""@/components/ui/alert"";
import { Trophy } from ""lucide-react"";

const formatTime = (seconds) => {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
};

const AnimalKingdomGame = () => {
  const GAME_DURATION = 600;
  const INITIAL_ENERGY = 3;

  const [message, setMessage] = useState('');
  const [computerMessage, setComputerMessage] = useState('');
  const [problem, setProblem] = useState(null);
  const [computerProblem, setComputerProblem] = useState(null);
  const [userAnswer, setUserAnswer] = useState({ numerator: '', denominator: '' });
  const [ballMoving, setBallMoving] = useState(true);

  const [gameState, setGameState] = useState({
    isPlaying: false,
    timeLeft: GAME_DURATION,
    slothScore: 0,
    opponentScore: 0,
    possession: 'sloth',
    ballPosition: { x: 50, y: 50 },
    ballAnimation: true,
    energy: INITIAL_ENERGY,
    waitingForCorrection: false,
    bonusChance: false,
    currentOpponent: ''
  });

  const opponents = [
    { name: 'Cheetah', emoji: 'üêÜ', color: 'yellow' },
    { name: 'Fox', emoji: 'ü¶ä', color: 'orange' },
    { name: 'Tiger', emoji: 'üêØ', color: 'amber' },
    { name: 'Lion', emoji: 'ü¶Å', color: 'yellow' },
    { name: 'Wolf', emoji: 'üê∫', color: 'gray' }
  ];

  const generateProblem = () => {
    const operation = Math.random() < 0.5 ? '+' : '-';
    let num1, den1, num2, den2;
    
    den1 = Math.floor(Math.random() * 11) + 2;
    den2 = Math.floor(Math.random() * 11) + 2;
    
    num1 = Math.floor(Math.random() * (den1 - 1)) + 1;
    num2 = Math.floor(Math.random() * (den2 - 1)) + 1;

    const lcd = getLCD(den1, den2);
    const factor1 = lcd / den1;
    const factor2 = lcd / den2;
    
    const adjustedNum1 = num1 * factor1;
    const adjustedNum2 = num2 * factor2;
    
    let answerNum;
    if (operation === '+') {
      answerNum = adjustedNum1 + adjustedNum2;
    } else {
      if (adjustedNum1 < adjustedNum2) {
        [num1, num2] = [num2, num1];
        [den1, den2] = [den2, den1];
        answerNum = adjustedNum2 - adjustedNum1;
      } else {
        answerNum = adjustedNum1 - adjustedNum2;
      }
    }
    
    const gcd = getGCD(answerNum, lcd);
    
    return {
      text: `${num1}/${den1} ${operation} ${num2}/${den2}`,
      answer: {
        numerator: answerNum / gcd,
        denominator: lcd / gcd
      }
    };
  };

  const getGCD = (a, b) => {
    return b === 0 ? a : getGCD(b, a % b);
  };

  const getLCD = (a, b) => {
    return (a * b) / getGCD(a, b);
  };

  const handleAnswer = () => {
    if (!problem) return;

    const userNumerator = parseInt(userAnswer.numerator);
    const userDenominator = parseInt(userAnswer.denominator) || 1;
    const userFraction = userNumerator / userDenominator;
    const correctFraction = problem.answer.numerator / problem.answer.denominator;

    if (Math.abs(userFraction - correctFraction) < 0.001) {
      setMessage('Correct! Great serve! üéØ');
      setGameState(prev => ({
        ...prev,
        slothScore: prev.slothScore + 1,
        ballPosition: { x: 75, y: 25 },
        ballAnimation: true,
        possession: 'opponent'
      }));
      
      setTimeout(() => {
        setComputerProblem(generateProblem());
        setMessage('');
        simulateOpponentTurn();
      }, 1500);
    } else {
      setMessage('Oops! Try again! ü§î');
      setGameState(prev => ({
        ...prev,
        ballPosition: { x: 90, y: 90 },
        energy: prev.energy - 1
      }));
      
      setTimeout(() => {
        setGameState(prev => ({
          ...prev,
          ballPosition: { x: 50, y: 50 }
        }));
      }, 1000);
    }
    setUserAnswer({ numerator: '', denominator: '' });
  };

  const simulateOpponentTurn = () => {
    setTimeout(() => {
      const successRate = 0.6;
      const scored = Math.random() < successRate;
      
      if (scored) {
        setComputerMessage(`${getCurrentOpponent().name} scores! üéØ`);
        setGameState(prev => ({
          ...prev,
          opponentScore: prev.opponentScore + 1,
          ballPosition: { x: 25, y: 75 },
          possession: 'sloth'
        }));
      } else {
        setComputerMessage(`${getCurrentOpponent().name} missed! Your chance! üéâ`);
        setGameState(prev => ({
          ...prev,
          ballPosition: { x: 10, y: 90 },
          possession: 'sloth',
          bonusChance: true
        }));
      }
      
      setTimeout(() => {
        setGameState(prev => ({
          ...prev,
          ballPosition: { x: 50, y: 50 },
          bonusChance: false
        }));
        setComputerMessage('');
        setProblem(generateProblem());
      }, 1500);
    }, 2000);
  };

  const getCurrentOpponent = () => {
    return opponents.find(o => o.name === gameState.currentOpponent) || opponents[0];
  };

  const startGame = () => {
    const randomOpponent = opponents[Math.floor(Math.random() * opponents.length)];
    setGameState(prev => ({
      ...prev,
      isPlaying: true,
      timeLeft: GAME_DURATION,
      slothScore: 0,
      opponentScore: 0,
      possession: 'sloth',
      ballPosition: { x: 50, y: 50 },
      energy: INITIAL_ENERGY,
      bonusChance: false,
      currentOpponent: randomOpponent.name
    }));
    setProblem(generateProblem());
    setMessage('');
    setComputerMessage('');
  };

  useEffect(() => {
    let animation;
    if (gameState.isPlaying && ballMoving) {
      let time = 0;
      const animate = () => {
        time += 0.02;
        const x = gameState.ballPosition.x + Math.sin(time) * 3;
        const y = gameState.ballPosition.y + Math.cos(time) * 3;
        
        setGameState(prev => ({
          ...prev,
          ballPosition: { x, y }
        }));
        animation = requestAnimationFrame(animate);
      };
      animation = requestAnimationFrame(animate);
    }
    return () => {
      if (animation) {
        cancelAnimationFrame(animation);
      }
    };
  }, [gameState.isPlaying, ballMoving]);

  useEffect(() => {
    let timer;
    if (gameState.isPlaying && gameState.timeLeft > 0) {
      timer = setInterval(() => {
        setGameState(prev => {
          if (prev.timeLeft <= 0) {
            return prev;
          }
          return {
            ...prev,
            timeLeft: prev.timeLeft - 1
          };
        });
      }, 1000);
    } else if (gameState.timeLeft === 0) {
      setMessage('Game Over!');
      setGameState(prev => ({ ...prev, isPlaying: false }));
    }
    return () => clearInterval(timer);
  }, [gameState.isPlaying, gameState.timeLeft]);

  return (
    <div className=""w-full max-w-3xl mx-auto"">
      <Card className=""bg-gradient-to-b from-green-100 to-emerald-100"">
        <CardContent className=""p-6"">
          <div className=""text-center mb-6"">
            <h1 className=""text-3xl font-bold mb-2"">Animal Kingdom Tournament üèê</h1>
            {gameState.isPlaying && (
              <>
                <div className=""text-lg mb-4"">
                  Sloth Tribe vs {getCurrentOpponent().name} {getCurrentOpponent().emoji}
                </div>
                <div className=""flex justify-between items-center mb-4"">
                  <div className=""flex items-center gap-2"">
                    <span className=""text-2xl"">ü¶•</span>
                    <span className=""font-bold"">Sloth: {gameState.slothScore}</span>
                  </div>
                  <div className=""flex items-center gap-2"">
                    <div className=""flex"">
                      {[...Array(gameState.energy)].map((_, i) => (
                        <span key={i} className=""text-xl"">üçÉ</span>
                      ))}
                    </div>
                    <span className=""font-bold text-xl"">{formatTime(gameState.timeLeft)}</span>
                  </div>
                  <div className=""flex items-center gap-2"">
                    <span className=""font-bold"">{getCurrentOpponent().name}: {gameState.opponentScore}</span>
                    <span className=""text-2xl"">{getCurrentOpponent().emoji}</span>
                  </div>
                </div>
              </>
            )}
          </div>

          {!gameState.isPlaying ? (
            <div className=""text-center space-y-4"">
              <div className=""p-4 bg-green-50 rounded-lg mb-4"">
                <h2 className=""text-xl font-bold mb-2"">Welcome to the Tournament! üéâ</h2>
                <p className=""mb-2"">Help the Sloth Tribe win by solving fraction problems!</p>
                <p>Score points by calculating correctly. Watch your energy! üçÉ</p>
              </div>
              <Button 
                onClick={startGame}
                className=""bg-emerald-500 hover:bg-emerald-600 text-white text-lg px-6 py-3""
              >
                Start Match! üèê
              </Button>
            </div>
          ) : (
            <>
              <div className=""relative w-full h-48 bg-emerald-200 rounded-lg mb-4 overflow-hidden"">
                <div className=""absolute w-full h-full border-2 border-white rounded-lg"">
                  <div className=""absolute left-1/2 top-0 w-1 h-full bg-white transform -translate-x-1/2"" />
                </div>
                
                <div className=""absolute top-2 left-4 text-2xl"">ü¶•</div>
                <div className=""absolute top-2 right-4 text-2xl"">{getCurrentOpponent().emoji}</div>
                
                <div 
                  className=""absolute transition-all duration-500""
                  style={{
                    left: `${gameState.ballPosition.x}%`,
                    top: `${gameState.ballPosition.y}%`,
                    transform: 'translate(-50%, -50%)'
                  }}
                >
                  <div className=""w-6 h-6 bg-white rounded-full border-2 border-emerald-400 animate-spin"">
                    <div className=""absolute inset-0 border-2 border-emerald-400 rounded-full"" />
                  </div>
                </div>
              </div>

              {gameState.possession === 'sloth' && problem && (
                <div className=""text-center space-y-4"">
                  <div className=""text-2xl font-bold"">
                    {gameState.bonusChance ? 
                      `BONUS CHANCE! ${getCurrentOpponent().emoji} missed!` : 
                      ""Your turn, mighty Sloth! ü¶•""}<br/>
                    {problem.text} = ?
                  </div>
                  <div className=""flex justify-center gap-2 items-center"">
                    <Input
                      type=""number""
                      value={userAnswer.numerator}
                      onChange={(e) => setUserAnswer(prev => ({ ...prev, numerator: e.target.value }))}
                      className=""w-20 text-center""
                      placeholder=""?""
                    />
                    <span className=""text-xl"">/</span>
                    <Input
                      type=""number""
                      value={userAnswer.denominator}
                      onChange={(e) => setUserAnswer(prev => ({ ...prev, denominator: e.target.value }))}
                      className=""w-20 text-center""
                      placeholder=""?""
                    />
                    <Button 
                      onClick={handleAnswer}
                      className=""ml-2 bg-emerald-500 hover:bg-emerald-600""
                    >
                      Serve!
                    </Button>
                  </div>
                  {message && (
                    <Alert className={message.includes('Correct') ? 'bg-green-100' : 'bg-yellow-100'}>
                      <AlertDescription>{message}</AlertDescription>
                    </Alert>
                  )}
                </div>
              )}

              {gameState.possession === 'opponent' && (
                <div className=""text-center"">
                  <div className=""text-xl font-bold mb-2"">
                    {getCurrentOpponent().name}'s turn {getCurrentOpponent().emoji}
                  </div>
                  {computerMessage && (
                    <Alert className={computerMessage.includes('scores') ? 'bg-yellow-100' : 'bg-green-100'}>
                      <AlertDescription>{computerMessage}</AlertDescription>
                    </Alert>
                  )}
                </div>
              )}

              {gameState.energy <= 0 && (
                <Alert className=""bg-red-100 mt-4"">
                  <AlertDescription>
                    Game Over! Out of energy! Final Score: Sloth {gameState.slothScore} - {getCurrentOpponent().name} {gameState.opponentScore}
                  </AlertDescription>
                </Alert>
              )}
            </>
          )}"
Equal sign,
Space mission game,"import React, { useState, useEffect, useRef } from 'react';
import { AlertCircle, CheckCircle, Rocket, Droplet, Star, Award, Shield } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';

const SpaceStationFuelManagement = () => {
  const [tankA, setTankA] = useState(5);
  const [tankB, setTankB] = useState(5);
  const [feedback, setFeedback] = useState('');
  const [problem, setProblem] = useState('');
  const [isMore, setIsMore] = useState(false);
  const [difference, setDifference] = useState(2);
  const [isCorrect, setIsCorrect] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [targetB, setTargetB] = useState(0);
  const [score, setScore] = useState(0);
  const [level, setLevel] = useState(1);
  const [streak, setStreak] = useState(0);
  const [attempts, setAttempts] = useState(0);

  // Sound effects
  const successSound = useRef(typeof Audio !== 'undefined' ? new Audio('/success.mp3') : null);
  const failSound = useRef(typeof Audio !== 'undefined' ? new Audio('/fail.mp3') : null);
  const dragSound = useRef(typeof Audio !== 'undefined' ? new Audio('/drag.mp3') : null);

  const tankBRef = useRef(null);
  const MAX_UNITS = 10;
  const LEVELS_TO_WIN = 10;
  const POINTS_TO_LEVEL_UP = 50; // Clear relationship between points and levels

  useEffect(() => {
    generateNewProblem();
  }, [level]);

  const getRandomEmoji = (isSuccess) => {
    const successEmojis = ['üöÄ', '‚≠ê', 'üåü', 'üåé', 'üåç', 'üåè', 'üõ∏', 'üë®‚ÄçüöÄ', 'üë©‚ÄçüöÄ'];
    const tryAgainEmojis = ['üå†', 'üí´', '‚ú®', 'üåõ'];
    const emojis = isSuccess ? successEmojis : tryAgainEmojis;
    return emojis[Math.floor(Math.random() * emojis.length)];
  };

  const getRankTitle = (level) => {
    const ranks = [
      'Space Cadet',
      'Junior Astronaut',
      'Space Explorer',
      'Star Commander',
      'Galaxy Captain',
      'Space Admiral',
      'Master Navigator',
      'Fleet Commander',
      'Space Emperor',
      'Cosmic Legend'
    ];
    return ranks[Math.min(level - 1, ranks.length - 1)];
  };

  const playSound = (soundRef) => {
    if (soundRef.current) {
      soundRef.current.currentTime = 0;
      soundRef.current.play().catch(e => console.log('Sound playback prevented'));
    }
  };

  const checkAnswer = () => {
    setAttempts(attempts + 1);
    if (tankB === targetB) {
      const emoji = getRandomEmoji(true);
      const newStreak = streak + 1;
      const pointsEarned = Math.max(3 - attempts, 1) * 10;
      
      setStreak(newStreak);
      const newScore = score + pointsEarned;
      setScore(newScore);
      setFeedback(`${emoji} Amazing! You earned ${pointsEarned} cosmic points!`);
      setIsCorrect(true);
      
      playSound(successSound);
      
      // Level up when reaching point threshold
      if (newScore >= level * POINTS_TO_LEVEL_UP) {
        setLevel(Math.min(level + 1, LEVELS_TO_WIN));
      }
      
      setTimeout(() => {
        generateNewProblem();
        setAttempts(0);
      }, 2000);
    } else {
      const emoji = getRandomEmoji(false);
      setStreak(0);
      setFeedback(`${emoji} Keep trying, brave ${getRankTitle(level)}! Tank B should have ${targetB} units to be ${difference} ${difference > 1 ? 'units' : 'unit'} ${isMore ? 'MORE' : 'LESS'} than Tank A.`);
      setIsCorrect(false);
      playSound(failSound);
    }
  };

  const generateNewProblem = () => {
    const newTankA = Math.floor(Math.random() * 6) + 3;
    const newDifference = Math.min(level, 3);
    const newIsMore = Math.random() < 0.5;
    
    setTankA(newTankA);
    setDifference(newDifference);
    setIsMore(newIsMore);
    
    const newTargetB = newIsMore ? 
      Math.min(newTankA + newDifference, MAX_UNITS) : 
      Math.max(newTankA - newDifference, 0);
    
    setTargetB(newTargetB);
    setTankB(5);
    setIsCorrect(null);
    setFeedback('');

    setProblem(`Tank A has ${newTankA} units of cosmic fuel. Make Tank B have ${newDifference} ${newDifference > 1 ? 'units' : 'unit'} ${newIsMore ? 'MORE' : 'LESS'} than Tank A!`);
  };

  const handleMouseDown = (e) => {
    e.preventDefault();
    setIsDragging(true);
    playSound(dragSound);
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  const handleMouseMove = (e) => {
    if (isDragging && tankBRef.current) {
      const rect = tankBRef.current.getBoundingClientRect();
      const y = e.clientY - rect.top;
      const height = rect.height;
      let newLevel = Math.round(MAX_UNITS * (1 - y / height));
      newLevel = Math.max(0, Math.min(newLevel, MAX_UNITS));
      setTankB(newLevel);
    }
  };

  useEffect(() => {
    document.addEventListener('mouseup', handleMouseUp);
    document.addEventListener('mousemove', handleMouseMove);
    return () => {
      document.removeEventListener('mouseup', handleMouseUp);
      document.removeEventListener('mousemove', handleMouseMove);
    };
  }, [isDragging]);

  const renderTank = (units, label, color, ref = null) => (
    <div className=""text-center relative"">
      <div 
        className={`w-24 h-80 bg-white rounded-lg relative overflow-hidden border-4 ${ref ? 'border-yellow-400 shadow-lg shadow-yellow-200' : 'border-blue-400'} ${ref ? 'cursor-ns-resize' : ''}`}
        ref={ref}
        onMouseDown={ref ? handleMouseDown : undefined}
      >
        {[...Array(MAX_UNITS + 1)].map((_, index) => (
          <div 
            key={`grid-${index}`}
            className=""absolute w-full h-8 border-t border-gray-300"" 
            style={{ bottom: `${(index / MAX_UNITS) * 100}%` }}
          />
        ))}
        
        <div 
          className={`absolute bottom-0 left-0 right-0 transition-all duration-200 ${color}`}
          style={{ height: `${(units / MAX_UNITS) * 100}%` }}
        />
        
        {[...Array(MAX_UNITS + 1)].map((_, index) => (
          <React.Fragment key={`measure-${index}`}>
            <div 
              className=""absolute left-0 w-4 h-1 bg-black z-10"" 
              style={{ bottom: `${(index / MAX_UNITS) * 100}%`, transform: 'translateY(50%)' }}
            />
            <div 
              className=""absolute right-0 text-xs text-black font-bold z-10"" 
              style={{ bottom: `${(index / MAX_UNITS) * 100}%`, transform: 'translateY(50%)' }}
            >
              {index}
            </div>
          </React.Fragment>
        ))}
        
        {!ref ? (
          <Droplet className=""absolute top-2 left-1/2 transform -translate-x-1/2 text-blue-700 z-20"" size={24} />
        ) : (
          <div 
            className=""absolute left-1/2 transform -translate-x-1/2 cursor-ns-resize transition-all duration-100 z-20""
            style={{ 
              top: `${((MAX_UNITS - tankB) / MAX_UNITS) * 100}%`,
            }}
          >
            <div className=""relative"">
              <Droplet 
                className={`text-blue-700 ${isDragging ? 'scale-125' : ''} transition-transform`} 
                size={32}
                fill={isDragging ? ""currentColor"" : ""none""}
              />
            </div>
          </div>
        )}
      </div>
      <p className=""mt-2 text-black font-bold text-lg"">{label}: {units} unit{units !== 1 ? 's' : ''}</p>
      {ref && (
        <p className=""mt-1 text-sm text-blue-700 font-semibold animate-pulse"">
          Drag up or down to fill! üöÄ
        </p>
      )}
    </div>
  );

  return (
    <div className=""p-6 max-w-4xl mx-auto bg-gradient-to-b from-blue-50 to-purple-50 text-black rounded-xl shadow-lg"">
      <div className=""flex items-center justify-between mb-6"">
        <div className=""flex items-center"">
          <Rocket className=""mr-2 text-blue-700"" size={32} />
          <h1 className=""text-3xl font-bold text-blue-900"">Space Academy: Fuel Master</h1>
        </div>
        <div className=""flex items-center bg-yellow-100 px-4 py-2 rounded-full"">
          <Star className=""text-yellow-500 mr-2"" />
          <span className=""font-bold text-lg"">{score} / {level * POINTS_TO_LEVEL_UP}</span>
        </div>
      </div>

      <div className=""flex items-center justify-between mb-4"">
        <div className=""flex items-center bg-purple-100 px-4 py-2 rounded-full"">
          <Shield className=""text-purple-500 mr-2"" />
          <span className=""font-bold"">Level {level} - {getRankTitle(level)}</span>
        </div>
        <div className=""flex items-center"">
          <span className=""text-sm font-bold mr-2"">Streak: {streak} üî•</span>
        </div>
      </div>
      
      <Alert className=""mb-6 bg-indigo-100 border-indigo-300 transform hover:scale-102 transition-transform"">
        <AlertCircle className=""h-6 w-6 text-indigo-700"" />
        <AlertTitle className=""text-indigo-900 text-2xl font-bold mb-2"">Mission #{level}:</AlertTitle>
        <AlertDescription className=""text-indigo-900 text-2xl font-semibold"">{problem}</AlertDescription>
      </Alert>

      <div className=""mb-6 flex justify-around bg-white/50 p-8 rounded-lg backdrop-blur-sm"">
        {renderTank(tankA, 'Fuel Tank A', 'bg-blue-600/50')}
        {renderTank(tankB, 'Fuel Tank B', isCorrect === false ? 'bg-red-500/50' : 'bg-green-600/50', tankBRef)}
      </div>

      <div className=""flex justify-center mb-6"">
        <Button 
          onClick={checkAnswer} 
          className=""bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-full text-lg shadow-md transform transition duration-200 hover:scale-105 hover:shadow-lg""
        >
          Launch Answer üöÄ
        </Button>
      </div>

      {feedback && (
        <Alert variant={isCorrect ? 'default' : 'destructive'} 
          className={`${isCorrect ? 'bg-green-100 text-green-900' : 'bg-red-100 text-red-900'} 
          transform transition-all duration-300 ${isCorrect ? 'scale-105' : 'scale-100'}`}>
          <AlertTitle className=""text-xl"">{isCorrect ? 'üéâ Mission Accomplished!' : 'üåü Keep Going!'}</AlertTitle>
          <AlertDescription className=""text-lg"">{feedback}</AlertDescription>
        </Alert>
      )}

      {level === LEVELS_TO_WIN && score >= POINTS_TO_LEVEL_UP * LEVELS_TO_WIN && (
        <Alert className=""mt-6 bg-yellow-100 border-yellow-300"">
          <Star className=""h-6 w-6 text-yellow-500"" />
          <AlertTitle className=""text-yellow-900 text-2xl font-bold"">üèÜ Congratulations, Space Master!</AlertTitle>
          <AlertDescription className=""text-yellow-900 text-xl"">
            You've completed all levels and become a true Space Master! Final Score: {score} points!
          </AlertDescription>
        </Alert>
      )}
    </div>
  );
};

export default SpaceStationFuelManagement;"
Aeryn's Magical Crystal Adventure,"import React, { useState, useEffect, useRef } from 'react';
import { Sparkles, Heart, Crown, Star, Gem, Wand } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';

const WizardOfOzAdventure = () => {
  const [crystalA, setCrystalA] = useState(5);
  const [crystalB, setCrystalB] = useState(5);
  const [feedback, setFeedback] = useState('');
  const [quest, setQuest] = useState('');
  const [isMore, setIsMore] = useState(false);
  const [difference, setDifference] = useState(2);
  const [isCorrect, setIsCorrect] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [targetB, setTargetB] = useState(0);
  const [score, setScore] = useState(0);
  const [level, setLevel] = useState(1);
  const [streak, setStreak] = useState(0);
  const [attempts, setAttempts] = useState(0);

  const successSound = useRef(typeof Audio !== 'undefined' ? new Audio('/success.mp3') : null);
  const failSound = useRef(typeof Audio !== 'undefined' ? new Audio('/fail.mp3') : null);
  const magicSound = useRef(typeof Audio !== 'undefined' ? new Audio('/drag.mp3') : null);

  const crystalBRef = useRef(null);
  const MAX_CRYSTALS = 10;
  const LEVELS_TO_WIN = 10;
  const POINTS_TO_LEVEL_UP = 50;

  useEffect(() => {
    generateNewQuest();
  }, [level]);

  const getRandomEmoji = (isSuccess) => {
    const successEmojis = ['üåà', '‚ú®', 'üí´', 'ü¶Å', 'üéÄ', 'üå∫', 'üé≠', 'üëó', 'üë†'];
    const tryAgainEmojis = ['üåô', '‚≠ê', 'üé™', 'üé°'];
    const emojis = isSuccess ? successEmojis : tryAgainEmojis;
    return emojis[Math.floor(Math.random() * emojis.length)];
  };

  const getLocationTitle = (level) => {
    const locations = [
      'Munchkinland',
      'Poppy Fields',
      'Enchanted Forest',
      'Emerald Gardens',
      'Crystal Caves',
      'Rainbow Bridge',
      'Golden Gates',
      'Silver Springs',
      'Ruby Palace',
      'Emerald City'
    ];
    return locations[Math.min(level - 1, locations.length - 1)];
  };

  const playSound = (soundRef) => {
    if (soundRef.current) {
      soundRef.current.currentTime = 0;
      soundRef.current.play().catch(e => console.log('Magic sound prevented'));
    }
  };

  const checkAnswer = () => {
    setAttempts(attempts + 1);
    if (crystalB === targetB) {
      const emoji = getRandomEmoji(true);
      const newStreak = streak + 1;
      const pointsEarned = Math.max(3 - attempts, 1) * 10;
      
      setStreak(newStreak);
      const newScore = score + pointsEarned;
      setScore(newScore);
      setFeedback(`${emoji} Wonderful magic, Aeryn! You earned ${pointsEarned} emerald points!`);
      setIsCorrect(true);
      
      playSound(successSound);
      
      if (newScore >= level * POINTS_TO_LEVEL_UP) {
        setLevel(Math.min(level + 1, LEVELS_TO_WIN));
      }
      
      setTimeout(() => {
        generateNewQuest();
        setAttempts(0);
      }, 2000);
    } else {
      const emoji = getRandomEmoji(false);
      setStreak(0);
      setFeedback(`${emoji} Keep trying, brave adventurer! The crystal basket needs ${targetB} crystals to be ${difference} ${difference > 1 ? 'crystals' : 'crystal'} ${isMore ? 'MORE' : 'LESS'} than Dorothy's basket.`);
      setIsCorrect(false);
      playSound(failSound);
    }
  };

  const generateNewQuest = () => {
    const newCrystalA = Math.floor(Math.random() * 6) + 3;
    const newDifference = Math.min(level, 3);
    const newIsMore = Math.random() < 0.5;
    
    setCrystalA(newCrystalA);
    setDifference(newDifference);
    setIsMore(newIsMore);
    
    const newTargetB = newIsMore ? 
      Math.min(newCrystalA + newDifference, MAX_CRYSTALS) : 
      Math.max(newCrystalA - newDifference, 0);
    
    setTargetB(newTargetB);
    setCrystalB(5);
    setIsCorrect(null);
    setFeedback('');

    setQuest(`Dorothy's basket has ${newCrystalA} magical crystals. Help the Scarecrow collect ${newDifference} ${newDifference > 1 ? 'crystals' : 'crystal'} ${newIsMore ? 'MORE' : 'LESS'} than Dorothy!`);
  };

  const handleMouseDown = (e) => {
    e.preventDefault();
    setIsDragging(true);
    playSound(magicSound);
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  const handleMouseMove = (e) => {
    if (isDragging && crystalBRef.current) {
      const rect = crystalBRef.current.getBoundingClientRect();
      const y = e.clientY - rect.top;
      const height = rect.height;
      let newLevel = Math.round(MAX_CRYSTALS * (1 - y / height));
      newLevel = Math.max(0, Math.min(newLevel, MAX_CRYSTALS));
      setCrystalB(newLevel);
    }
  };

  useEffect(() => {
    document.addEventListener('mouseup', handleMouseUp);
    document.addEventListener('mousemove', handleMouseMove);
    return () => {
      document.removeEventListener('mouseup', handleMouseUp);
      document.removeEventListener('mousemove', handleMouseMove);
    };
  }, [isDragging]);

  const renderBasket = (crystals, label, color, ref = null) => (
    <div className=""text-center relative"">
      <div 
        className={`w-32 h-80 relative overflow-hidden ${ref ? 'cursor-ns-resize' : ''}`}
        ref={ref}
        onMouseDown={ref ? handleMouseDown : undefined}
      >
        {/* Basket handle */}
        <div className=""absolute w-40 h-40 border-t-8 rounded-full -top-14 left-1/2 transform -translate-x-1/2 
          border-amber-700 z-30"" />
        
        {/* Basket body */}
        <div className={`absolute inset-0 ${ref ? 'border-pink-800' : 'border-amber-800'} 
          border-4 rounded-b-3xl overflow-hidden bg-[#f4d03f]/20`}>
          
          {/* Woven texture pattern */}
          <div className=""absolute inset-0"" style={{
            backgroundImage: `
              repeating-linear-gradient(
                0deg,
                transparent,
                transparent 15px,
                rgba(139, 69, 19, 0.1) 15px,
                rgba(139, 69, 19, 0.1) 20px
              ),
              repeating-linear-gradient(
                90deg,
                transparent,
                transparent 15px,
                rgba(139, 69, 19, 0.1) 15px,
                rgba(139, 69, 19, 0.1) 20px
              )
            `
          }} />

          {/* Measurement grid */}
          {[...Array(MAX_CRYSTALS + 1)].map((_, index) => (
            <div 
              key={`grid-${index}`}
              className=""absolute w-full h-8 border-t border-amber-900/20"" 
              style={{ bottom: `${(index / MAX_CRYSTALS) * 100}%` }}
            />
          ))}
          
          {/* Crystal fill */}
          <div 
            className={`absolute bottom-0 left-0 right-0 transition-all duration-200 ${color}`}
            style={{ height: `${(crystals / MAX_CRYSTALS) * 100}%` }}
          />
          
          {/* Measurement marks */}
          {[...Array(MAX_CRYSTALS + 1)].map((_, index) => (
            <React.Fragment key={`measure-${index}`}>
              <div 
                className=""absolute left-0 w-3 h-1 bg-amber-900/60 z-10"" 
                style={{ bottom: `${(index / MAX_CRYSTALS) * 100}%`, transform: 'translateY(50%)' }}
              />
              <div 
                className=""absolute right-1 text-xs text-amber-900/80 font-bold z-10"" 
                style={{ bottom: `${(index / MAX_CRYSTALS) * 100}%`, transform: 'translateY(50%)' }}
              >
                {index}
              </div>
            </React.Fragment>
          ))}
        </div>

        {/* Crystal gem indicator */}
        {!ref ? (
          <Gem className=""absolute top-4 left-1/2 transform -translate-x-1/2 text-purple-700 z-20"" size={24} />
        ) : (
          <div 
            className=""absolute left-1/2 transform -translate-x-1/2 cursor-ns-resize transition-all duration-100 z-20""
            style={{ 
              top: `${((MAX_CRYSTALS - crystalB) / MAX_CRYSTALS) * 100}%`,
            }}
          >
            <div className=""relative"">
              <Gem 
                className={`text-pink-700 ${isDragging ? 'scale-125' : ''} transition-transform`} 
                size={32}
                fill={isDragging ? ""currentColor"" : ""none""}
              />
            </div>
          </div>
        )}
      </div>
      <p className=""mt-2 text-black font-bold text-lg"">{label}: {crystals} crystal{crystals !== 1 ? 's' : ''}</p>
      {ref && (
        <p className=""mt-1 text-sm text-pink-700 font-semibold animate-pulse"">
          Wave Glinda's wand up or down! ‚ú®
        </p>
      )}
    </div>
  );

  return (
    <div className=""p-6 max-w-4xl mx-auto bg-gradient-to-b from-pink-50 to-purple-50 text-black rounded-xl shadow-lg"">
      <div className=""flex items-center justify-between mb-6"">
        <div className=""flex items-center"">
          <Wand className=""mr-2 text-pink-700"" size={32} />
          <h1 className=""text-3xl font-bold text-pink-900"">Aeryn's Magical Crystal Adventure</h1>
        </div>
        <div className=""flex items-center bg-yellow-100 px-4 py-2 rounded-full"">
          <Crown className=""text-yellow-500 mr-2"" />
          <span className=""font-bold text-lg"">{score} / {level * POINTS_TO_LEVEL_UP}</span>
        </div>
      </div>

      <div className=""flex items-center justify-between mb-4"">
        <div className=""flex items-center bg-purple-100 px-4 py-2 rounded-full"">
          <Sparkles className=""text-purple-500 mr-2"" />
          <span className=""font-bold"">Adventure {level} - {getLocationTitle(level)}</span>
        </div>
        <div className=""flex items-center"">
          <span className=""text-sm font-bold mr-2"">Magic Streak: {streak} üåü</span>
        </div>
      </div>
      
      <Alert className=""mb-6 bg-pink-100 border-pink-300 transform hover:scale-102 transition-transform"">
        <Heart className=""h-6 w-6 text-pink-700"" />
        <AlertTitle className=""text-pink-900 text-2xl font-bold mb-2"">Magic Quest #{level}:</AlertTitle>
        <AlertDescription className=""text-pink-900 text-2xl font-semibold"">{quest}</AlertDescription>
      </Alert>

      <div className=""mb-6 flex justify-around bg-white/50 p-8 rounded-lg backdrop-blur-sm"">
        {renderBasket(crystalA, ""Dorothy's Basket"", 'bg-purple-600/50')}
        {renderBasket(crystalB, ""Scarecrow's Basket"", isCorrect === false ? 'bg-red-500/50' : 'bg-green-600/50', crystalBRef)}
      </div>

      <div className=""flex justify-center mb-6"">
        <Button 
          onClick={checkAnswer} 
          className=""bg-pink-600 hover:bg-pink-700 text-white font-bold py-3 px-6 rounded-full text-lg shadow-md transform transition duration-200 hover:scale-105 hover:shadow-lg""
        >
          Cast Your Spell ‚ú®
        </Button>
      </div>

      {feedback && (
        <Alert variant={isCorrect ? 'default' : 'destructive'} 
          className={`${isCorrect ? 'bg-green-100 text-green-900' : 'bg-pink-100 text-pink-900'} 
          transform transition-all duration-300 ${isCorrect ? 'scale-105' : 'scale-100'}`}>
          <AlertTitle className=""text-xl"">{isCorrect ? 'üéâ Magical Success!' : 'üåü Try Again!'}</AlertTitle>
          <AlertDescription className=""text-lg"">{feedback}</AlertDescription>
        </Alert>
      )}

      {level === LEVELS_TO_WIN && score >= POINTS_TO_LEVEL_UP * LEVELS_TO_WIN && (
        <Alert className=""mt-6 bg-yellow-100 border-yellow-300"">
          <Star className=""h-6 w-6 text-yellow-500"" />
          <AlertTitle className=""text-yellow-900 text-2xl font-bold"">üèÜ Congratulations, Wizard of Oz Champion!</AlertTitle>
          <AlertDescription className=""text-yellow-900 text-xl"">
            You've helped Dorothy and friends collect all the magical crystals! The Emerald City awaits! Final Score: {score} points!
          </AlertDescription>
        </Alert>
      )}
    </div>
  );
};

export default WizardOfOzAdventure;"
,
Mimi and milas waterpark adventure,"import React, { useState, useEffect } from 'react'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Star, Heart, CheckCircle2, RefreshCcw, Trophy, Zap, Waves } from 'lucide-react'
import { Input } from '@/components/ui/input'
import { Progress } from '@/components/ui/progress'

const WaterparkDivision = () => {
  const [xp, setXP] = useState(0);
  const maxXP = 1500;
  const [currentProblem, setCurrentProblem] = useState(0);
  const [answer, setAnswer] = useState('');
  const [attempts, setAttempts] = useState(0);
  const [showHint, setShowHint] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  
  const problems = [
    {
      question: ""Help divide the baby whales into equal groups!"",
      total: 6,
      groups: 2,
      type: 'Baby Whale',
      emoji: 'üêã',
      hint: ""If we split 6 whales into 2 groups, how many whales per group?"",
      xpValue: 100
    },
    {
      question: ""Organize the baby dolphins into equal swimming classes!"",
      total: 9,
      groups: 3,
      type: 'Baby Dolphin',
      emoji: 'üê¨',
      hint: ""9 dolphins need to be split into 3 equal groups."",
      xpValue: 100
    },
    {
      question: ""Split the baby penguins into equal teams!"",
      total: 8,
      groups: 4,
      type: 'Baby Penguin',
      emoji: 'üêß',
      hint: ""8 penguins need to be divided into 4 equal teams."",
      xpValue: 100
    },
    {
      question: ""Organize the baby turtles into equal racing lanes!"",
      total: 10,
      groups: 2,
      type: 'Baby Turtle',
      emoji: 'üê¢',
      hint: ""10 turtles need to be split into 2 equal lanes."",
      xpValue: 100
    },
    {
      question: ""Divide the baby whales into equal pods!"",
      total: 12,
      groups: 3,
      type: 'Baby Whale',
      emoji: 'üêã',
      hint: ""12 whales need to be organized into 3 equal pods."",
      xpValue: 100
    },
    {
      question: ""Split the baby dolphins into equal shows!"",
      total: 15,
      groups: 5,
      type: 'Baby Dolphin',
      emoji: 'üê¨',
      hint: ""15 dolphins need to perform in 5 equal shows."",
      xpValue: 100
    },
    {
      question: ""Organize the baby penguins into equal skating groups!"",
      total: 16,
      groups: 4,
      type: 'Baby Penguin',
      emoji: 'üêß',
      hint: ""16 penguins need to be split into 4 equal skating groups."",
      xpValue: 100
    },
    {
      question: ""Divide the baby turtles into equal swimming lessons!"",
      total: 14,
      groups: 2,
      type: 'Baby Turtle',
      emoji: 'üê¢',
      hint: ""14 turtles need to be split into 2 equal swimming lessons."",
      xpValue: 100
    },
    {
      question: ""Sort the baby whales into equal watching stations!"",
      total: 18,
      groups: 3,
      type: 'Baby Whale',
      emoji: 'üêã',
      hint: ""18 whales need to be divided into 3 equal stations."",
      xpValue: 100
    },
    {
      question: ""Group the baby dolphins into equal training sessions!"",
      total: 20,
      groups: 4,
      type: 'Baby Dolphin',
      emoji: 'üê¨',
      hint: ""20 dolphins need to be split into 4 equal training sessions."",
      xpValue: 100
    },
    {
      question: ""Divide the baby penguins into equal ice rinks!"",
      total: 21,
      groups: 3,
      type: 'Baby Penguin',
      emoji: 'üêß',
      hint: ""21 penguins need to be divided among 3 equal ice rinks."",
      xpValue: 100
    },
    {
      question: ""Sort the baby turtles into equal relaxation pools!"",
      total: 24,
      groups: 6,
      type: 'Baby Turtle',
      emoji: 'üê¢',
      hint: ""24 turtles need to be split into 6 equal relaxation pools."",
      xpValue: 100
    },
    {
      question: ""Organize the baby whales into equal performance areas!"",
      total: 25,
      groups: 5,
      type: 'Baby Whale',
      emoji: 'üêã',
      hint: ""25 whales need to be divided into 5 equal performance areas."",
      xpValue: 100
    },
    {
      question: ""Split the baby dolphins into equal play zones!"",
      total: 27,
      groups: 3,
      type: 'Baby Dolphin',
      emoji: 'üê¨',
      hint: ""27 dolphins need to be split into 3 equal play zones."",
      xpValue: 100
    },
    {
      question: ""Divide the baby penguins into equal celebration groups!"",
      total: 28,
      groups: 4,
      type: 'Baby Penguin',
      emoji: 'üêß',
      hint: ""28 penguins need to be split into 4 equal celebration groups."",
      xpValue: 100
    }
  ];

  const generateCharacters = () => {
    const currentType = problems[currentProblem].type;
    const currentEmoji = problems[currentProblem].emoji;
    return Array(problems[currentProblem].total).fill(null).map((_, index) => ({
      id: index,
      type: currentType,
      emoji: currentEmoji
    }));
  };

  const [characters, setCharacters] = useState(generateCharacters());
  const [groups, setGroups] = useState(Array(problems[0].groups).fill([]));
  const [draggedChar, setDraggedChar] = useState(null);

  useEffect(() => {
    setCharacters(generateCharacters());
    setGroups(Array(problems[currentProblem].groups).fill([]));
  }, [currentProblem]);

  const handleDragStart = (char) => {
    setDraggedChar(char);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const handleDrop = (groupIndex) => {
    if (!draggedChar) return;
    
    const newGroups = [...groups];
    newGroups[groupIndex] = [...(newGroups[groupIndex] || []), draggedChar];
    setGroups(newGroups);
    setDraggedChar(null);
  };

  const calculateStars = () => {
    const percentage = (xp / maxXP) * 100;
    return Math.floor(percentage / 20);
  };

  const checkAnswer = () => {
    const correctAnswer = problems[currentProblem].total / problems[currentProblem].groups;
    if (parseInt(answer) === correctAnswer) {
      const xpGained = problems[currentProblem].xpValue + Math.max(0, 50 - (attempts * 10));
      setXP(prev => Math.min(prev + xpGained, maxXP));
      setShowSuccess(true);
      setTimeout(() => {
        if (currentProblem < problems.length - 1) {
          setCurrentProblem(prev => prev + 1);
          resetProblem();
        }
      }, 2000);
    } else {
      setAttempts(prev => prev + 1);
      setShowHint(true);
    }
  };

  const resetProblem = () => {
    setAnswer('');
    setAttempts(0);
    setShowHint(false);
    setShowSuccess(false);
    setGroups(Array(problems[currentProblem].groups).fill([]));
    setCharacters(generateCharacters());
  };

  const renderCharacter = (type, emoji) => {
    const styles = {
      'Baby Whale': { bg: 'bg-blue-200' },
      'Baby Bunny': { bg: 'bg-pink-200' },
      'Baby Turtle': { bg: 'bg-green-200' },
      'Baby Dolphin': { bg: 'bg-cyan-200' },
      'Baby Penguin': { bg: 'bg-purple-200' }
    };

    return (
      <div className={`flex flex-col items-center justify-center w-12 h-12 ${styles[type].bg} rounded-full`}>
        <div className=""text-xl"">{emoji}</div>
        <Waves className=""w-3 h-3 text-blue-500"" />
      </div>
    );
  };

  return (
    <Card className=""p-3 bg-gradient-to-br from-blue-50 to-cyan-50"">
      <div className=""text-center mb-2"">
        <h1 className=""text-xl font-bold text-blue-600"">Mimi and Mila's Waterpark Adventure</h1>
        <p className=""text-sm text-cyan-600"">Help our friends organize the perfect water party!</p>
      </div>

      <div className=""mb-3"">
        <div className=""flex justify-between items-center mb-1"">
          <div className=""flex items-center gap-1"">
            <Zap className=""w-4 h-4 text-yellow-500"" />
            <span className=""text-sm font-bold text-yellow-600"">
              {xp} / {maxXP} XP
            </span>
          </div>
          <div className=""flex items-center gap-1"">
            {Array(5).fill(null).map((_, i) => (
              <Trophy 
                key={i} 
                className={`w-4 h-4 ${i < calculateStars() ? 'text-yellow-500' : 'text-gray-300'}`} 
              />
            ))}
          </div>
        </div>
        <Progress value={(currentProblem / problems.length) * 100} className=""h-1.5"" />
        <div className=""text-center text-xs text-cyan-600 mt-0.5"">
          Question {currentProblem + 1} of {problems.length}
        </div>
      </div>

      <div className=""text-center mb-3"">
        <div className=""text-2xl font-bold text-blue-600 mb-2"">
          {problems[currentProblem].total} √∑ {problems[currentProblem].groups} = ?
        </div>
        
        <div className=""bg-white rounded-lg p-2 mb-2 shadow-sm"">
          <p className=""text-sm text-cyan-600 mb-2"">
            {problems[currentProblem].question}
          </p>
          
          <div className=""flex items-center justify-center gap-2"">
            <Input 
              type=""number"" 
              value={answer}
              onChange={(e) => setAnswer(e.target.value)}
              placeholder=""Enter answer""
              className=""w-24 text-center text-base h-8""
            />
            <span className=""text-sm text-blue-600 font-bold"">
              per group
            </span>
          </div>
        </div>
      </div>

      <div className=""text-center mb-2 text-sm text-cyan-600"">
        Drag characters into equal groups!
      </div>

      <div className=""flex flex-wrap gap-1 justify-center mb-3 p-2 bg-white rounded-lg"">
        {characters.filter(char => !groups.flat().find(grouped => grouped?.id === char.id)).map(char => (
          <div
            key={char.id}
            draggable
            onDragStart={() => handleDragStart(char)}
            className=""cursor-move hover:scale-110 transition-transform""
          >
            {renderCharacter(char.type, char.emoji)}
          </div>
        ))}
      </div>

      <div className=""grid grid-cols-2 md:grid-cols-4 gap-2 mb-3"">
        {Array(problems[currentProblem].groups).fill(null).map((_, index) => (
          <div
            key={index}
            onDragOver={handleDragOver}
            onDrop={() => handleDrop(index)}
            className=""min-h-[100px] p-2 rounded-lg bg-white border-2 border-dashed border-blue-300 flex flex-wrap gap-1 items-start justify-center""
          >
            <div className=""w-full text-center text-blue-500 font-bold text-sm mb-1"">
              Group {index + 1}
            </div>
            {groups[index]?.map(char => (
              <div key={char.id}>
                {renderCharacter(char.type, char.emoji)}
              </div>
            ))}
          </div>
        ))}
      </div>

      {showHint && (
        <div className=""text-center mb-2 text-sm text-cyan-600"">
          {problems[currentProblem].hint}
        </div>
      )}

      <div className=""flex justify-center gap-2"">
        <Button
          onClick={checkAnswer}
          className=""bg-blue-500 hover:bg-blue-600 text-white h-8 text-sm""
        >
          <CheckCircle2 className=""mr-1 h-3 w-3"" />
          Check Answer
        </Button>
        <Button
          onClick={resetProblem}
          variant=""outline""
          className=""border-blue-500 text-blue-500 hover:bg-blue-50 h-8 text-sm""
        >
          <RefreshCcw className=""mr-1 h-3 w-3"" />
          Try Again
        </Button>
      </div>

      {showSuccess && (
        <div className=""mt-2 text-center"">
          <div className=""text-green-600 text-sm font-bold mb-1"">
            üéâ Splash-tastic! +{problems[currentProblem].xpValue + Math.max(0, 50 - (attempts * 10))} XP!
          </div>
          {currentProblem < problems.length - 1 && (
            <div className=""text-xs text-cyan-600"">
              Get ready for the next water adventure!
            </div>
          )}
        </div>
      )}
    </Card>
  );
};

export default WaterparkDivision;"
,
WIP: Rates with fractions,"import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Shield, Users, Truck, AlertCircle, CheckCircle2, Timer } from 'lucide-react';

const EvacuationCalculator = () => {
  const [currentLevel, setCurrentLevel] = useState(1);
  const [userAnswer, setUserAnswer] = useState('');
  const [feedback, setFeedback] = useState('');
  const [showHint, setShowHint] = useState(false);
  const [score, setScore] = useState(0);

  const levels = [
    {
      id: 1,
      scenario: ""The Shield Defense Squad has reinforced 3/5 of the city's shields using 1/3 of their power cells."",
      question: ""How many power cells will be needed to reinforce all city shields?"",
      answer: ""5/9"",
      hint: ""Think: (1/3 power cells) √∑ (3/5 shields) = ? power cells per full shield system"",
      context: ""The sharks are approaching! Shield integrity is crucial for civilian protection.""
    },
    {
      id: 2,
      scenario: ""Trader convoys have evacuated 2/3 of the market district using 1/4 of their fuel reserves."",
      question: ""How much fuel will be needed to evacuate the entire district?"",
      answer: ""3/8"",
      hint: ""Calculate: (1/4 fuel) √∑ (2/3 district) = ? fuel per district"",
      context: ""Time is running out as crab forces approach the market district!""
    },
    {
      id: 3,
      scenario: ""Mech pilots have fortified 4/5 of the outer wall using 2/3 of their reinforcement materials."",
      question: ""How many reinforcement material units are needed for the complete wall?"",
      answer: ""5/6"",
      hint: ""Solve: (2/3 materials) √∑ (4/5 wall) = ? materials per wall"",
      context: ""The wall must hold against the incoming mech assault!""
    }
  ];

  const currentProblem = levels[currentLevel - 1];

  const checkAnswer = () => {
    const normalizedUserAnswer = userAnswer.replace(/\s/g, '').toLowerCase();
    const normalizedCorrectAnswer = currentProblem.answer.replace(/\s/g, '').toLowerCase();
    
    if (normalizedUserAnswer === normalizedCorrectAnswer) {
      setFeedback('Correct! The evacuation plan is working!');
      setScore(score + 1);
      setTimeout(() => {
        if (currentLevel < levels.length) {
          setCurrentLevel(currentLevel + 1);
          setUserAnswer('');
          setFeedback('');
          setShowHint(false);
        } else {
          setFeedback('Mission accomplished! The city is secured!');
        }
      }, 1500);
    } else {
      setFeedback('Recalculate! We need precise numbers to protect our citizens.');
    }
  };

  return (
    <div className=""max-w-2xl mx-auto p-4"">
      <Card className=""mb-4 border-2 border-blue-200"">
        <CardHeader className=""bg-blue-50"">
          <CardTitle className=""text-xl font-bold text-center flex items-center justify-center gap-2"">
            <Shield className=""w-6 h-6 text-blue-500"" />
            City Defense Calculator
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className=""flex items-center justify-between mb-4"">
            <div className=""flex items-center gap-2"">
              <Timer className=""w-5 h-5 text-yellow-500"" />
              <span className=""font-semibold"">Emergency Level: {currentLevel}</span>
            </div>
            <div className=""flex items-center gap-2"">
              <Shield className=""w-5 h-5 text-green-500"" />
              <span>Defense Score: {score}/{levels.length}</span>
            </div>
          </div>

          <div className=""bg-gray-50 p-4 rounded-lg mb-4 border-l-4 border-yellow-500"">
            <p className=""text-sm text-yellow-700 mb-2"">{currentProblem.context}</p>
            <p className=""mb-2 font-medium"">{currentProblem.scenario}</p>
            <p className=""font-bold text-blue-800"">{currentProblem.question}</p>
          </div>

          <div className=""flex gap-2 mb-4"">
            <input
              type=""text""
              value={userAnswer}
              onChange={(e) => setUserAnswer(e.target.value)}
              placeholder=""Enter fraction (e.g., 5/9)""
              className=""flex-1 p-2 border rounded""
            />
            <button
              onClick={checkAnswer}
              className=""bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 flex items-center gap-2""
            >
              <Shield className=""w-4 h-4"" />
              Calculate
            </button>
          </div>

          {feedback && (
            <div className={`p-3 rounded mb-4 flex items-center gap-2 ${
              feedback.includes('Correct') ? 'bg-green-100 text-green-700' : 'bg-yellow-100 text-yellow-700'
            }`}>
              {feedback.includes('Correct') ? (
                <CheckCircle2 className=""w-5 h-5"" />
              ) : (
                <AlertCircle className=""w-5 h-5"" />
              )}
              {feedback}
            </div>
          )}

          <button
            onClick={() => setShowHint(!showHint)}
            className=""text-blue-500 hover:text-blue-600""
          >
            {showHint ? 'Hide Strategic Hint' : 'Request Strategic Hint'}
          </button>

          {showHint && (
            <div className=""mt-4 p-3 bg-blue-50 rounded border-l-4 border-blue-500"">
              <p className=""text-blue-800"">üéØ Strategic Approach: {currentProblem.hint}</p>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className=""text-lg flex items-center gap-2"">
            <Users className=""w-5 h-5 text-blue-500"" />
            Defense Planning Guide
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ol className=""list-decimal pl-5 space-y-2"">
            <li>Identify the resource rate needed (power cells, fuel, materials)</li>
            <li>Set up the division: (resources used) √∑ (area covered)</li>
            <li>Convert the division to multiplication by the reciprocal</li>
            <li>Simplify to get the most efficient resource allocation</li>
          </ol>
        </CardContent>
      </Card>
    </div>
  );
};

export default EvacuationCalculator;"
Equal sign,"import React, { useState, useEffect } from 'react';
import { Alert, AlertTitle } from ""@/components/ui/alert"";
import { Sparkles, Heart, Trophy, Check, X, GraduationCap } from 'lucide-react';

const MagicNumberBox = ({ value, onChange, color, character, isLocked }) => {
  return (
    <div className=""flex flex-col items-center space-y-2"">
      <div className={`text-sm font-bold ${color.replace('border', 'text')}`}>
        {character}
      </div>
      <input
        type=""number""
        value={value}
        onChange={(e) => onChange(parseInt(e.target.value) || 0)}
        className={`w-16 h-16 text-2xl text-center border-4 rounded-lg ${color} focus:ring-2 
          bg-white/90 backdrop-blur-sm shadow-inner transition-transform hover:scale-105
          ${isLocked ? 'opacity-70 cursor-not-allowed' : ''}`}
        min=""0""
        max={10}
        disabled={isLocked}
      />
      <div className=""flex flex-wrap gap-1 justify-center max-w-[120px]"">
        {[...Array(value)].map((_, i) => (
          <div key={i} className=""relative"" style={{ animationDelay: `${i * 100}ms` }}>
            <Sparkles 
              className={`w-5 h-5 ${color.replace('border', 'text')}`}
            />
          </div>
        ))}
      </div>
    </div>
  );
};

const OzMathDiscovery = () => {
  const [leftFirst, setLeftFirst] = useState(0);
  const [leftSecond, setLeftSecond] = useState(0);
  const [rightFirst, setRightFirst] = useState(0);
  const [rightSecond, setRightSecond] = useState(0);
  const [score, setScore] = useState(0);
  const [level, setLevel] = useState(1);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [feedback, setFeedback] = useState(null);
  
  const leftSum = leftFirst + leftSecond;
  const rightSum = rightFirst + rightSecond;
  const isEqual = leftSum === rightSum;

  const handleNumberChange = (setter) => (value) => {
    setter(Math.min(Math.max(0, value), 10));
  };

  useEffect(() => {
    generateNewProblem();
  }, [level]);

  const generateNewProblem = () => {
    const maxNum = Math.min(3 + level, 10);
    const leftNum = Math.floor(Math.random() * maxNum) + 1;
    const rightNum = Math.floor(Math.random() * maxNum) + 1;
    
    setLeftFirst(leftNum);
    setLeftSecond(0);
    setRightFirst(rightNum);
    setRightSecond(0);
    setIsSubmitted(false);
    setFeedback(null);
  };

  const handleSubmit = () => {
    setIsSubmitted(true);
    
    if (isEqual && leftSum > 0) {
      setFeedback({
        type: 'success',
        message: `Wonderful Aeryn! Both paths have ${leftSum} crystals! +${level * 10} points!`,
        icon: <Check className=""text-green-500 w-6 h-6"" />
      });
      setScore(score + (level * 10));
      
      setTimeout(() => {
        setLevel(level + 1);
        generateNewProblem();
      }, 2000);
    } else {
      setFeedback({
        type: 'error',
        message: leftSum > rightSum ? 
          `Hint: Dorothy's path has more crystals (${leftSum}) than Glinda's path (${rightSum}). Try adding more to Glinda's side!` :
          `Hint: Glinda's path has more crystals (${rightSum}) than Dorothy's path (${leftSum}). Try adding more to Dorothy's side!`,
        icon: <X className=""text-red-500 w-6 h-6"" />
      });
    }
  };

  const renderTotal = (sum, baseColor) => (
    <div className=""flex flex-col items-center mt-4 pt-4 border-t-2 border-yellow-200"">
      <div className=""text-2xl font-bold mb-2 text-yellow-600"">{sum} Crystals</div>
      <div className=""flex flex-wrap gap-1 justify-center max-w-[150px]"">
        {[...Array(sum)].map((_, i) => (
          <Sparkles 
            key={i}
            className={`w-5 h-5 text-yellow-400 ${isSubmitted && isEqual ? 'animate-spin' : 'animate-pulse'}`}
          />
        ))}
      </div>
    </div>
  );

  return (
    <div className=""min-h-screen p-8 bg-gradient-to-b from-purple-100 to-yellow-50"">
      <div className=""max-w-6xl mx-auto space-y-8"">
        {/* Header Section */}
        <div className=""text-center space-y-4 mb-12"">
          <div className=""flex items-center justify-center gap-3"">
            <GraduationCap className=""w-12 h-12 text-purple-600"" />
            <h1 className=""text-4xl font-bold text-purple-600"">
              Aeryn's Magical Math Adventure
            </h1>
            <GraduationCap className=""w-12 h-12 text-purple-600"" />
          </div>
          <p className=""text-xl text-purple-700"">
            Help Glinda collect equal amounts of magical crystals!
          </p>
          <div className=""flex items-center justify-center gap-4 mt-4"">
            <div className=""flex items-center gap-2 bg-white/80 px-4 py-2 rounded-full shadow-md"">
              <Trophy className=""text-yellow-500 w-6 h-6"" />
              <span className=""text-xl font-bold text-purple-600"">Score: {score}</span>
            </div>
            <div className=""flex items-center gap-2 bg-white/80 px-4 py-2 rounded-full shadow-md"">
              <Sparkles className=""text-purple-500 w-6 h-6"" />
              <span className=""text-xl font-bold text-purple-600"">Level: {level}</span>
            </div>
          </div>
        </div>

        {/* Main Game Area */}
        <div className=""flex justify-center items-center space-x-12 bg-white/40 backdrop-blur-sm p-8 rounded-2xl shadow-xl"">
          {/* Dorothy's Team Side */}
          <div className=""space-y-6 p-6 bg-white/80 backdrop-blur-sm rounded-xl border-2 border-yellow-300 shadow-lg"">
            <div className=""text-center text-xl font-bold text-purple-600 mb-4"">
              Dorothy's Path
            </div>
            <div className=""flex items-center space-x-4"">
              <MagicNumberBox 
                value={leftFirst} 
                onChange={handleNumberChange(setLeftFirst)}
                color=""border-pink-400""
                character=""Dorothy""
                isLocked={true}
              />
              <span className=""text-3xl font-bold text-yellow-600"">+</span>
              <MagicNumberBox 
                value={leftSecond} 
                onChange={handleNumberChange(setLeftSecond)}
                color=""border-yellow-400""
                character=""Scarecrow""
                isLocked={false}
              />
            </div>
            {renderTotal(leftSum, ""text-yellow-400"")}
          </div>

          <div className=""text-5xl font-bold text-yellow-600"">=</div>

          {/* Glinda's Side */}
          <div className=""space-y-6 p-6 bg-white/80 backdrop-blur-sm rounded-xl border-2 border-yellow-300 shadow-lg"">
            <div className=""text-center text-xl font-bold text-purple-600 mb-4"">
              Glinda's Path
            </div>
            <div className=""flex items-center space-x-4"">
              <MagicNumberBox 
                value={rightFirst} 
                onChange={handleNumberChange(setRightFirst)}
                color=""border-purple-400""
                character=""Glinda""
                isLocked={true}
              />
              <span className=""text-3xl font-bold text-yellow-600"">+</span>
              <MagicNumberBox 
                value={rightSecond} 
                onChange={handleNumberChange(setRightSecond)}
                color=""border-blue-400""
                character=""Friends""
                isLocked={false}
              />
            </div>
            {renderTotal(rightSum, ""text-yellow-400"")}
          </div>
        </div>

        {/* Submit Button */}
        <div className=""text-center mt-8"">
          <button 
            onClick={handleSubmit}
            className=""bg-purple-500 text-white px-8 py-4 rounded-lg text-xl font-bold hover:bg-purple-600 
              shadow-lg transform transition hover:scale-105 flex mx-auto items-center gap-2""
          >
            Check My Answer
          </button>
        </div>

        {/* Feedback Alert */}
        {feedback && (
          <div className=""mt-6"">
            <Alert className={`${feedback.type === 'success' ? 'bg-green-100/90' : 'bg-red-100/90'} 
              backdrop-blur-sm border-${feedback.type === 'success' ? 'green' : 'red'}-500 max-w-2xl mx-auto`}>
              <AlertTitle className=""text-center flex items-center justify-center gap-2 text-lg"">
                {feedback.icon}
                {feedback.message}
                {feedback.type === 'success' && <Heart className=""text-pink-500 animate-bounce"" />}
              </AlertTitle>
            </Alert>
          </div>
        )}
      </div>
    </div>
  );
};

export default OzMathDiscovery;"
,
Bunny kingdom,"import { useState, useEffect } from 'react';
import { Plus, Minus, Star, Sparkles } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';

// Custom Bunny component
const Bunny = ({ className, delay = 0 }) => (
  <div 
    className={`relative ${className}`}
    style={{ 
      animation: 'hop 1s infinite',
      animationDelay: `${delay}s`,
      animationTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1)'
    }}
  >
    <div className=""w-8 h-8 bg-pink-200 rounded-full relative shadow-md"">
      <div className=""absolute -top-4 left-1 w-2 h-4 bg-pink-200 rounded-full transform -rotate-6""></div>
      <div className=""absolute -top-4 right-1 w-2 h-4 bg-pink-200 rounded-full transform rotate-6""></div>
      <div className=""absolute top-2 left-2 w-1 h-1 bg-pink-900 rounded-full""></div>
      <div className=""absolute top-2 right-2 w-1 h-1 bg-pink-900 rounded-full""></div>
      <div className=""absolute top-3 left-1/2 transform -translate-x-1/2 w-2 h-1 bg-pink-400 rounded-full""></div>
    </div>
  </div>
);

// Custom Equals component
const Equals = () => (
  <div className=""flex flex-col gap-1"">
    <div className=""h-1 w-6 bg-purple-600 rounded""></div>
    <div className=""h-1 w-6 bg-purple-600 rounded""></div>
  </div>
);

// Story elements for different levels
const STORY_STAGES = {
  1: {
    title: ""The Meadow"",
    description: ""Help Charlotte count her first group of bunnies in the peaceful meadow!"",
    range: { min: 1, max: 5 }
  },
  2: {
    title: ""The Forest"",
    description: ""More bunnies join Charlotte as she ventures into the magical forest!"",
    range: { min: 3, max: 8 }
  },
  3: {
    title: ""The Mountains"",
    description: ""Charlotte needs to count carefully as her bunny army grows in the misty mountains!"",
    range: { min: 5, max: 12 }
  },
  4: {
    title: ""The Crystal Cave"",
    description: ""Deep in the caves, Charlotte prepares her strongest bunnies to face the Enderman!"",
    range: { min: 8, max: 15 }
  }
};

// Celebration component
const Celebration = () => {
  const particles = Array(8).fill(null);
  return (
    <div className=""fixed inset-0 pointer-events-none"">
      {particles.map((_, i) => (
        <div
          key={i}
          className=""absolute animate-float""
          style={{
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
            animationDelay: `${Math.random() * 2}s`,
            animationDuration: `${2 + Math.random() * 3}s`
          }}
        >
          {Math.random() > 0.5 ? 
            <Star className=""text-yellow-400 w-6 h-6"" /> : 
            <Sparkles className=""text-purple-400 w-6 h-6"" />
          }
        </div>
      ))}
    </div>
  );
};

// BunnyGroupDisplay Component
const BunnyGroupDisplay = ({ number, title, subtitle }) => (
  <Card className=""p-6 bg-white border-2 w-48 shadow-lg relative overflow-hidden"">
    <div className=""absolute top-2 left-2 text-sm font-bold text-pink-800"">{title}</div>
    {subtitle && (
      <div className=""absolute top-6 left-2 text-xs text-pink-600"">{subtitle}</div>
    )}
    <div className=""mt-8"">
      <div className=""grid grid-cols-5 gap-1 mb-4 place-items-center"">
        {[...Array(number)].map((_, i) => (
          <Bunny 
            key={i} 
            delay={i * 0.1}
            className=""transform transition-transform hover:scale-110""
          />
        ))}
      </div>
      <div className=""text-center"">
        <span className=""text-2xl font-bold text-pink-800"">{number}</span>
      </div>
    </div>
  </Card>
);

export default function BunnyAdditionQuiz() {
  const [number1, setNumber1] = useState(2);
  const [number2, setNumber2] = useState(1);
  const [userAnswer, setUserAnswer] = useState(0);
  const [xp, setXp] = useState(0);
  const [feedback, setFeedback] = useState('');
  const [streak, setStreak] = useState(0);
  const [showCelebration, setShowCelebration] = useState(false);
  const [isChecking, setIsChecking] = useState(false);
  const [level, setLevel] = useState(1);
  const [powerLevel, setPowerLevel] = useState(0);
  
  const correctAnswer = number1 + number2;

  const generateNewQuestion = () => {
    const stage = STORY_STAGES[level];
    const newNum1 = Math.floor(Math.random() * (stage.range.max - stage.range.min + 1)) + stage.range.min;
    let newNum2;
    do {
      newNum2 = Math.floor(Math.random() * (stage.range.max - stage.range.min + 1)) + stage.range.min;
    } while (newNum1 + newNum2 > stage.range.max * 2);
    
    setNumber1(newNum1);
    setNumber2(newNum2);
    setUserAnswer(0);
    setFeedback('');
    setIsChecking(false);
  };

  const checkAnswer = () => {
    if (isChecking) return;
    setIsChecking(true);
    
    if (userAnswer === correctAnswer) {
      const xpGain = 10 + (streak * 5) + (level * 5);
      const newXP = xp + xpGain;
      setXp(newXP);
      setStreak(prev => prev + 1);
      setShowCelebration(true);
      setPowerLevel(Math.floor(newXP / 100));
      
      // Level progression
      if (streak === 4 && level < 4) {
        setLevel(prev => prev + 1);
        setFeedback(`üéâ Amazing! You've unlocked ${STORY_STAGES[level + 1].title}! +${xpGain} XP!`);
      } else {
        setFeedback(`‚ú® Charlotte's bunnies multiply correctly! +${xpGain} XP! Streak: ${streak + 1}`);
      }
      
      setTimeout(() => {
        setShowCelebration(false);
        generateNewQuestion();
      }, 2000);
    } else {
      setStreak(0);
      setFeedback('Oh no! The Enderman is getting closer! Count the bunnies again, Charlotte! ‚≠ê');
      setIsChecking(false);
    }
  };

  useEffect(() => {
    generateNewQuestion();
  }, [level]);

  return (
    <div className=""flex flex-col items-center gap-8 p-8 bg-gradient-to-b from-purple-100 to-pink-100 min-h-screen"">
      {showCelebration && <Celebration />}
      
      <div className=""text-center max-w-2xl"">
        <h1 className=""text-4xl font-bold text-purple-800 mb-2"">Charlotte's Bunny Kingdom</h1>
        <p className=""text-xl text-purple-600 mb-2"">{STORY_STAGES[level].title}</p>
        <p className=""text-lg text-purple-500"">{STORY_STAGES[level].description}</p>
        
        <div className=""mt-4 flex gap-4 justify-center flex-wrap"">
          <div className=""bg-purple-100 px-4 py-2 rounded-lg"">
            <span className=""text-lg font-bold text-purple-700"">Bunny Power: {powerLevel}</span>
          </div>
          <div className=""bg-pink-100 px-4 py-2 rounded-lg"">
            <span className=""text-lg font-bold text-pink-700"">XP: {xp}</span>
          </div>
          <div className=""bg-yellow-100 px-4 py-2 rounded-lg"">
            <span className=""text-lg font-bold text-yellow-700"">Streak: {streak}</span>
          </div>
        </div>
      </div>
      
      <div className=""flex items-center gap-4 flex-wrap justify-center"">
        <BunnyGroupDisplay 
          number={number1} 
          title=""Charlotte's Bunnies""
          subtitle=""First Group"" 
        />
        <Plus className=""text-purple-600 w-8 h-8"" />
        <BunnyGroupDisplay 
          number={number2} 
          title=""Reinforcements""
          subtitle=""Second Group""
        />
        <div className=""flex items-center justify-center w-8 h-8"">
          <Equals />
        </div>
        <Card className=""p-6 bg-white border-2 w-48 shadow-lg relative"">
          <div className=""absolute top-2 left-2 text-sm font-bold text-pink-800"">Total Army</div>
          <div className=""mt-8"">
            <div className=""grid grid-cols-5 gap-1 mb-4 place-items-center"">
              {[...Array(userAnswer)].map((_, i) => (
                <Bunny 
                  key={i} 
                  delay={i * 0.1}
                  className=""transform transition-transform hover:scale-110""
                />
              ))}
            </div>
            <div className=""flex justify-center gap-4 mt-4"">
              <button
                onClick={() => setUserAnswer(Math.max(0, userAnswer - 1))}
                className=""bg-purple-600 text-white p-2 rounded-full hover:bg-purple-700 transition-colors""
                disabled={isChecking}
              >
                <Minus size={20} />
              </button>
              <span className=""text-2xl font-bold text-purple-800"">{userAnswer}</span>
              <button
                onClick={() => setUserAnswer(Math.min(30, userAnswer + 1))}
                className=""bg-purple-600 text-white p-2 rounded-full hover:bg-purple-700 transition-colors""
                disabled={isChecking}
              >
                <Plus size={20} />
              </button>
            </div>
          </div>
        </Card>
      </div>

      <div className=""flex flex-col gap-4 items-center"">
        <button
          onClick={checkAnswer}
          disabled={isChecking}
          className=""px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-lg font-bold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all disabled:opacity-50 disabled:cursor-not-allowed""
        >
          Count Your Army!
        </button>
        
        {feedback && (
          <Alert className={`${feedback.includes('Amazing') || feedback.includes('unlocked') ? 'bg-green-100 animate-bounce' : 'bg-yellow-100'} max-w-md`}>
            <AlertDescription className=""text-lg"">{feedback}</AlertDescription>
          </Alert>
        )}
      </div>

      {powerLevel >= 5 && (
        <div className=""text-purple-600 bg-purple-100 p-4 rounded-lg shadow-lg animate-pulse text-center"">
          <span className=""font-bold"">‚ö° Charlotte's Bunny Power is Growing! ‚ö°</span>
          <br />
          The Enderman's glow dims as your army strengthens!
        </div>
      )}

      {level === 4 && powerLevel >= 10 && (
        <div className=""text-pink-600 bg-pink-100 p-4 rounded-lg shadow-lg animate-pulse text-center max-w-md"">
          <span className=""font-bold"">üåü Charlotte's Ultimate Power! üåü</span>
          <br />
          Your bunny army is now strong enough to face the Enderman! Keep practicing to become even stronger!
        </div>
      )}
    </div>
  );
}"
Blessie's Wizard of Oz,"import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Check, RefreshCw, ArrowRight, Sparkles, Star } from 'lucide-react';
import { Input } from '@/components/ui/input';

const OzFractions = () => {
  const [level, setLevel] = useState(1);
  const [score, setScore] = useState(0);
  const [currentChallenge, setCurrentChallenge] = useState(null);
  const [splitPieces, setSplitPieces] = useState([]);
  const [selectedPieces, setSelectedPieces] = useState([]);
  const [showSuccess, setShowSuccess] = useState(false);
  const [showHint, setShowHint] = useState(false);
  const [userAnswer, setUserAnswer] = useState({ numerator: '', denominator: '' });
  const [showAnswerFeedback, setShowAnswerFeedback] = useState(false);
  const [answerIsCorrect, setAnswerIsCorrect] = useState(false);
  
  // Generate random fractions for each level
  const generateChallenge = () => {
    const denominators = [5, 6, 8, 10];
    const denominator = denominators[Math.floor(Math.random() * denominators.length)];
    const numerator = Math.floor(Math.random() * (denominator - 1)) + 1;
    const splitCount = level > 3 ? (Math.random() < 0.5 ? 2 : 3) : 2; // Introduce triple splits after level 3
    return { numerator, denominator, splitCount };
  };
  
  // Initialize or reset the game state
  const initializeGame = (challenge) => {
    setSplitPieces(Array(challenge.denominator).fill(false));
    setSelectedPieces(Array(challenge.denominator * challenge.splitCount).fill(false));
    setShowSuccess(false);
    setShowHint(false);
    setUserAnswer({ numerator: '', denominator: '' });
    setShowAnswerFeedback(false);
    setAnswerIsCorrect(false);
  };
  
  // Initialize the game on first render
  useEffect(() => {
    const newChallenge = generateChallenge();
    setCurrentChallenge(newChallenge);
    initializeGame(newChallenge);
  }, []);

  const allSplit = splitPieces.every(Boolean);
  
  const handleSplit = (index) => {
    const newSplit = [...splitPieces];
    newSplit[index] = true;
    setSplitPieces(newSplit);
    setSelectedPieces(Array(currentChallenge.denominator * currentChallenge.splitCount).fill(false));
    setShowSuccess(false);
    setShowAnswerFeedback(false);
  };
  
  const handleSelect = (index) => {
    if (!allSplit) return;
    const newSelected = [...selectedPieces];
    newSelected[index] = !newSelected[index];
    setSelectedPieces(newSelected);
    setShowAnswerFeedback(false);
  };

  const checkAnswer = () => {
    const correctNumerator = currentChallenge.numerator * currentChallenge.splitCount;
    const correctDenominator = currentChallenge.denominator * currentChallenge.splitCount;
    const isCorrect = 
      parseInt(userAnswer.numerator) === correctNumerator && 
      parseInt(userAnswer.denominator) === correctDenominator;
    
    setAnswerIsCorrect(isCorrect);
    setShowAnswerFeedback(true);
    if (isCorrect) {
      setShowSuccess(true);
    }
  };

  const nextLevel = () => {
    setLevel(level + 1);
    setScore(score + 10);
    const newChallenge = generateChallenge();
    setCurrentChallenge(newChallenge);
    initializeGame(newChallenge);
  };

  const reset = () => {
    setLevel(1);
    setScore(0);
    const newChallenge = generateChallenge();
    setCurrentChallenge(newChallenge);
    initializeGame(newChallenge);
  };

  if (!currentChallenge) return null;

  const createPizzaSlicePath = (startAngle, endAngle) => {
    const startX = 50 + 48 * Math.cos((startAngle - 90) * Math.PI / 180);
    const startY = 50 + 48 * Math.sin((startAngle - 90) * Math.PI / 180);
    const endX = 50 + 48 * Math.cos((endAngle - 90) * Math.PI / 180);
    const endY = 50 + 48 * Math.sin((endAngle - 90) * Math.PI / 180);
    
    const largeArcFlag = endAngle - startAngle > 180 ? 1 : 0;
    
    return `M 50 50 L ${startX} ${startY} A 48 48 0 ${largeArcFlag} 1 ${endX} ${endY} Z`;
  };

  return (
    <Card className=""w-full max-w-6xl mx-auto"">
      <CardHeader className=""bg-yellow-100 rounded-t-lg"">
        <CardTitle className=""text-center flex items-center justify-center gap-2"">
          <Sparkles className=""w-6 h-6 text-yellow-600"" /> 
          Glinda's Magical Crystal Pizza Adventure 
          <Sparkles className=""w-6 h-6 text-yellow-600"" />
        </CardTitle>
        <div className=""flex justify-between px-4"">
          <div className=""text-purple-600 font-medium"">Level: {level}</div>
          <div className=""text-purple-600 font-medium"">Magic Points: {score}</div>
        </div>
      </CardHeader>
      <CardContent className=""p-8"">
        <div className=""space-y-8"">
          <div className=""bg-purple-50 p-4 rounded-lg border-2 border-purple-200"">
            <div className=""text-center text-lg font-medium mb-2"">üßô‚Äç‚ôÄÔ∏è Glinda's Challenge:</div>
            <p className=""text-center"">
              ""Dorothy and friends found <span className=""text-purple-500 font-bold"">{currentChallenge.numerator}/{currentChallenge.denominator}</span> of a 
              magical crystal pizza along the yellow brick road! To share its power, we must split each slice into {currentChallenge.splitCount} equal pieces. 
              How many smaller pieces would equal their share?""
            </p>
          </div>
          
          <div className=""flex justify-around items-center"">
            <div className=""space-y-4"">
              <div className=""text-center font-medium p-2 bg-yellow-100 rounded-lg"">
                Original Magic Crystal Share
              </div>
              <div className=""relative w-80 h-80"">
                <svg viewBox=""0 0 100 100"" className=""w-full h-full"">
                  {[...Array(currentChallenge.denominator)].map((_, i) => {
                    const startAngle = (i * 360) / currentChallenge.denominator;
                    const endAngle = ((i + 1) * 360) / currentChallenge.denominator;
                    const isColored = i < currentChallenge.numerator;
                    return (
                      <path
                        key={i}
                        d={createPizzaSlicePath(startAngle, endAngle)}
                        fill={isColored ? ""#9F7AEA"" : ""#FFE5B4""}
                        stroke=""#805AD5""
                        strokeWidth=""0.5""
                      />
                    );
                  })}
                </svg>
              </div>
              <div className=""text-center font-medium"">{currentChallenge.numerator}/{currentChallenge.denominator} = ? magical pieces</div>
            </div>

            <ArrowRight className=""w-12 h-12 text-yellow-500"" />

            <div className=""space-y-4"">
              <div className=""text-center font-medium p-2 bg-purple-100 rounded-lg"">
                {allSplit ? 
                  ""Select pieces to match the magic share!"" : 
                  `Click each slice to split into ${currentChallenge.splitCount} pieces!`}
              </div>
              <div className=""relative w-80 h-80"">
                <svg viewBox=""0 0 100 100"" className=""w-full h-full"">
                  {splitPieces.map((isSplit, i) => {
                    const sliceAngle = (360 / currentChallenge.denominator);
                    const startAngle = i * sliceAngle;
                    
                    if (isSplit) {
                      return ([...Array(currentChallenge.splitCount)].map((_, subIndex) => {
                        const subSliceAngle = sliceAngle / currentChallenge.splitCount;
                        const subStartAngle = startAngle + (subIndex * subSliceAngle);
                        const subEndAngle = subStartAngle + subSliceAngle;
                        const index = i * currentChallenge.splitCount + subIndex;
                        const isSelected = selectedPieces[index];
                        return (
                          <path
                            key={`${i}-${subIndex}`}
                            d={createPizzaSlicePath(subStartAngle, subEndAngle)}
                            fill={isSelected ? ""#9F7AEA"" : ""#FFE5B4""}
                            stroke=""#805AD5""
                            strokeWidth=""0.5""
                            onClick={() => handleSelect(index)}
                            className={allSplit ? ""cursor-pointer hover:opacity-80 transition-opacity"" : """"}
                          />
                        );
                      }));
                    } else {
                      return (
                        <path
                          key={i}
                          d={createPizzaSlicePath(startAngle, startAngle + sliceAngle)}
                          fill=""#FFE5B4""
                          stroke=""#805AD5""
                          strokeWidth=""0.5""
                          onClick={() => handleSplit(i)}
                          className=""cursor-pointer hover:opacity-80 transition-opacity""
                        />
                      );
                    }
                  })}
                </svg>
              </div>
              <div className=""text-center font-medium"">
                {allSplit ? 
                  `Selected: ${selectedPieces.filter(Boolean).length} magical pieces` : 
                  `Split: ${splitPieces.filter(Boolean).length}/${currentChallenge.denominator} slices`}
              </div>
            </div>
          </div>

          {allSplit && (
            <div className=""flex flex-col items-center gap-4 bg-purple-50 p-6 rounded-lg"">
              <div className=""text-lg font-medium"">What fraction represents the selected pieces?</div>
              <div className=""flex items-center gap-2"">
                <Input 
                  type=""number""
                  value={userAnswer.numerator}
                  onChange={(e) => setUserAnswer(prev => ({ ...prev, numerator: e.target.value }))}
                  className=""w-20 text-center""
                  placeholder=""?""
                />
                <div className=""text-2xl"">/</div>
                <Input 
                  type=""number""
                  value={userAnswer.denominator}
                  onChange={(e) => setUserAnswer(prev => ({ ...prev, denominator: e.target.value }))}
                  className=""w-20 text-center""
                  placeholder=""?""
                />
                <Button 
                  onClick={checkAnswer}
                  className=""ml-4 bg-purple-500 hover:bg-purple-600""
                >
                  Check Answer
                </Button>
              </div>
              {showAnswerFeedback && !answerIsCorrect && (
                <div className=""text-red-500"">
                  That's not quite right. Try again!
                </div>
              )}
            </div>
          )}

          <div className=""flex justify-center gap-4"">
            <Button 
              onClick={() => setShowHint(!showHint)}
              variant=""outline""
              className=""text-sm bg-yellow-50 hover:bg-yellow-100""
            >
              Ask Scarecrow for help
            </Button>
            <Button 
              onClick={reset}
              variant=""outline""
              className=""flex items-center gap-2 text-sm bg-red-50 hover:bg-red-100""
            >
              <RefreshCw className=""w-4 h-4"" /> Return to Kansas
            </Button>
          </div>

          {showHint && (
            <div className=""bg-yellow-50 p-4 rounded-lg text-center border-2 border-yellow-200"">
              <p className=""font-medium"">üé≠ Scarecrow's Smart Thinking:</p>
              <p className=""text-sm text-gray-700"">
                {!allSplit ? 
                  `First, let's use Glinda's magic to split each crystal slice into ${currentChallenge.splitCount} equal pieces!` : 
                  `If we had ${currentChallenge.numerator} big pieces, and each piece splits into ${currentChallenge.splitCount} smaller pieces, how many small pieces would that make?`}
              </p>
            </div>
          )}

          {showSuccess && (
            <div className=""bg-purple-50 p-4 rounded-lg text-center border-2 border-purple-200"">
              <div className=""flex items-center justify-center gap-2 text-purple-600 font-medium"">
                <Star className=""w-5 h-5"" />
                Magical Success! üéâ
              </div>
              <p className=""text-sm text-gray-700 mt-2"">
                ""Wonderful!"" says Glinda. ""You've discovered that 
                <span className=""font-bold""> {currentChallenge.numerator}/{currentChallenge.denominator} = 
                {currentChallenge.numerator * currentChallenge.splitCount}/{currentChallenge.denominator * currentChallenge.splitCount}</span>!""
              </p>
              <Button 
                onClick={nextLevel}
                className=""mt-4 bg-purple-500 hover:bg-purple-600 text-white""
              >
                Continue Down the Yellow Brick Road
              </Button>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default OzFractions;"
,
WIP,"import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Check, Plus, Minus, AlertCircle } from 'lucide-react';

const DotsGame = () => {
  const [dotsArray, setDotsArray] = useState([[], [], [], []]);
  const [showResults, setShowResults] = useState(false);
  const [isCorrect, setIsCorrect] = useState([false, false, false, false]);
  const [equations, setEquations] = useState([]);

  // Positions for up to 10 dots
  const getPositions = (index) => {
    const positions = [
      { top: 20, left: 25 },
      { top: 20, left: 75 },
      { top: 40, left: 25 },
      { top: 40, left: 75 },
      { top: 60, left: 25 },
      { top: 60, left: 75 },
      { top: 80, left: 25 },
      { top: 80, left: 75 },
      { top: 50, left: 50 },
      { top: 30, left: 50 },
    ];

    return {
      top: `${positions[index % 10].top}%`,
      left: `${positions[index % 10].left}%`,
    };
  };

  const addDot = (boxIndex) => {
    if (dotsArray[boxIndex].length < 10) {
      const newDotsArray = [...dotsArray];
      newDotsArray[boxIndex] = [
        ...newDotsArray[boxIndex],
        {
          id: newDotsArray[boxIndex].length,
          color: '#FFD700', // Gold color for dots
        },
      ];
      setDotsArray(newDotsArray);
    }
  };

  const removeDot = (boxIndex) => {
    if (dotsArray[boxIndex].length > 0) {
      const newDotsArray = [...dotsArray];
      newDotsArray[boxIndex] = newDotsArray[boxIndex].slice(0, -1);
      setDotsArray(newDotsArray);
    }
  };

  // Function to generate new equations
  const generateEquations = () => {
    // Generate random operands between 1 and 5
    const operand1 = Math.floor(Math.random() * 5) + 1;
    const operand2 = Math.floor(Math.random() * 5) + 1;
    const sum = operand1 + operand2;

    // First equation: operand1 + operand2 = ?
    const firstEquation = {
      type: 'addition',
      operands: [operand1, operand2],
      missing: 'result',
      correctAnswer: sum,
    };

    // Second equation: sum - operand2 = ?
    const secondEquation = {
      type: 'subtraction',
      operands: [sum, operand2],
      missing: 'result',
      correctAnswer: operand1,
    };

    // Third equation: ? - operand2 = operand1
    const thirdEquation = {
      type: 'subtraction',
      operands: [null, operand2],
      missing: 'operand1',
      correctAnswer: sum,
      result: operand1,
    };

    // Fourth equation: sum - ? = operand1
    const fourthEquation = {
      type: 'subtraction',
      operands: [sum, null],
      missing: 'operand2',
      correctAnswer: operand2,
      result: operand1,
    };

    setEquations([firstEquation, secondEquation, thirdEquation, fourthEquation]);
    setDotsArray([[], [], [], []]);
    setIsCorrect([false, false, false, false]);
    setShowResults(false);
  };

  useEffect(() => {
    generateEquations();
  }, []);

  const checkAnswers = () => {
    setShowResults(true);
    const newIsCorrect = equations.map((equation, index) => {
      const userAnswer = dotsArray[index].length;
      return userAnswer === equation.correctAnswer;
    });
    setIsCorrect(newIsCorrect);
  };

  useEffect(() => {
    if (showResults && isCorrect.every((v) => v)) {
      setTimeout(() => {
        generateEquations();
      }, 2000);
    }
  }, [showResults, isCorrect]);

  const renderDots = (dots) => {
    return dots.map((dot, index) => (
      <div
        key={dot.id}
        className=""absolute w-4 h-4 rounded-full""
        style={{
          backgroundColor: dot.color,
          ...getPositions(index),
          transform: 'translate(-50%, -50%)',
        }}
      />
    ));
  };

  const renderOperandDots = (number, color = '#FFD700') => {
    const dots = [];
    for (let i = 0; i < number; i++) {
      dots.push(
        <div
          key={i}
          className=""absolute w-4 h-4 rounded-full""
          style={{
            backgroundColor: color,
            ...getPositions(i),
            transform: 'translate(-50%, -50%)',
          }}
        />
      );
    }
    return dots;
  };

  const AnswerBox = ({ index, question }) => (
    <div className=""text-center"">
      <div className=""flex items-center"">
        <Card className=""w-32 h-48 bg-gray-100 relative overflow-hidden shadow-md"">
          {renderDots(dotsArray[index])}
          {showResults && (
            <div className=""absolute -top-2 -right-2"">
              {isCorrect[index] ? (
                <div className=""bg-green-500 rounded-full p-1"">
                  <Check className=""w-6 h-6 text-white"" />
                </div>
              ) : (
                <div className=""bg-red-500 rounded-full p-1"">
                  <AlertCircle className=""w-6 h-6 text-white"" />
                </div>
              )}
            </div>
          )}
        </Card>
        {/* Plus and minus buttons to the right */}
        <div className=""flex flex-col ml-2 space-y-2"">
          <button
            onClick={() => addDot(index)}
            className=""p-2 bg-green-100 rounded-full hover:bg-green-200 transition-colors""
          >
            <Plus className=""w-6 h-6 text-green-600"" />
          </button>
          <button
            onClick={() => removeDot(index)}
            className=""p-2 bg-red-100 rounded-full hover:bg-red-200 transition-colors""
          >
            <Minus className=""w-6 h-6 text-red-600"" />
          </button>
        </div>
      </div>
      <div className=""mt-2 text-xl font-bold"">{dotsArray[index].length}</div>
      {question && (
        <div className=""mt-2 text-sm text-gray-600"">{question}</div>
      )}
    </div>
  );

  if (equations.length === 0) {
    return null;
  }

  return (
    <div className=""w-full max-w-5xl mx-auto p-6 bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl shadow-2xl"">
      <h2 className=""text-3xl mb-12 text-center font-extrabold text-blue-800"">
        Magical Math Adventure!
      </h2>
      <div className=""space-y-16"">
        {/* First equation: operand1 + operand2 = ? */}
        <div className=""flex items-center justify-center space-x-6 bg-white p-6 rounded-2xl shadow-md"">
          {/* Left operand */}
          <div className=""text-center"">
            <Card className=""w-32 h-48 bg-gray-100 relative shadow-md"">
              {renderOperandDots(equations[0].operands[0], '#4CAF50')}
            </Card>
            <div className=""mt-2 text-xl font-bold text-green-800"">
              {equations[0].operands[0]}
            </div>
          </div>

          <div className=""text-4xl font-bold text-blue-600"">+</div>

          {/* Right operand */}
          <div className=""text-center"">
            <Card className=""w-32 h-48 bg-gray-100 relative shadow-md"">
              {renderOperandDots(equations[0].operands[1], '#FF5722')}
            </Card>
            <div className=""mt-2 text-xl font-bold text-orange-800"">
              {equations[0].operands[1]}
            </div>
          </div>

          <div className=""text-4xl font-bold text-blue-600"">=</div>

          {/* Answer */}
          <AnswerBox index={0} />
        </div>

        {/* Second equation: sum - operand2 = ? */}
        <div className=""flex items-center justify-center space-x-6 bg-white p-6 rounded-2xl shadow-md"">
          {/* Left operand */}
          <div className=""text-center"">
            <Card className=""w-32 h-48 bg-gray-100 relative shadow-md"">
              {renderOperandDots(equations[1].operands[0], '#4CAF50')}
            </Card>
            <div className=""mt-2 text-xl font-bold text-green-800"">
              {equations[1].operands[0]}
            </div>
          </div>

          <div className=""text-4xl font-bold text-blue-600"">-</div>

          {/* Right operand */}
          <div className=""text-center"">
            <Card className=""w-32 h-48 bg-gray-100 relative shadow-md"">
              {renderOperandDots(equations[1].operands[1], '#FF5722')}
            </Card>
            <div className=""mt-2 text-xl font-bold text-orange-800"">
              {equations[1].operands[1]}
            </div>
          </div>

          <div className=""text-4xl font-bold text-blue-600"">=</div>

          {/* Answer */}
          <AnswerBox index={1} />
        </div>

        {/* Third equation: ? - operand2 = operand1 */}
        <div className=""flex items-center justify-center space-x-6 bg-white p-6 rounded-2xl shadow-md"">
          {/* Missing operand */}
          <AnswerBox index={2} question=""Find the starting number"" />

          <div className=""text-4xl font-bold text-blue-600"">-</div>

          {/* Right operand */}
          <div className=""text-center"">
            <Card className=""w-32 h-48 bg-gray-100 relative shadow-md"">
              {renderOperandDots(equations[2].operands[1], '#FF5722')}
            </Card>
            <div className=""mt-2 text-xl font-bold text-orange-800"">
              {equations[2].operands[1]}
            </div>
          </div>

          <div className=""text-4xl font-bold text-blue-600"">=</div>

          {/* Result */}
          <div className=""text-center"">
            <Card className=""w-32 h-48 bg-gray-100 relative shadow-md"">
              {renderOperandDots(equations[2].result, '#4CAF50')}
            </Card>
            <div className=""mt-2 text-xl font-bold text-green-800"">
              {equations[2].result}
            </div>
          </div>
        </div>

        {/* Fourth equation: sum - ? = operand1 */}
        <div className=""flex items-center justify-center space-x-6 bg-white p-6 rounded-2xl shadow-md"">
          {/* Left operand */}
          <div className=""text-center"">
            <Card className=""w-32 h-48 bg-gray-100 relative shadow-md"">
              {renderOperandDots(equations[3].operands[0], '#4CAF50')}
            </Card>
            <div className=""mt-2 text-xl font-bold text-green-800"">
              {equations[3].operands[0]}
            </div>
          </div>

          <div className=""text-4xl font-bold text-blue-600"">-</div>

          {/* Missing operand */}
          <AnswerBox index={3} question=""What number is missing?"" />

          <div className=""text-4xl font-bold text-blue-600"">=</div>

          {/* Result */}
          <div className=""text-center"">
            <Card className=""w-32 h-48 bg-gray-100 relative shadow-md"">
              {renderOperandDots(equations[3].result, '#4CAF50')}
            </Card>
            <div className=""mt-2 text-xl font-bold text-green-800"">
              {equations[3].result}
            </div>
          </div>
        </div>

        {/* Check Answer Button */}
        <div className=""flex justify-center mt-8"">
          <button
            onClick={checkAnswers}
            className=""px-10 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-xl font-bold shadow-lg transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2""
          >
            Check Answers
          </button>
        </div>
      </div>
    </div>
  );
};

export default DotsGame;"